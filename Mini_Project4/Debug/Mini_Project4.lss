
Mini_Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002018  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002018  000020ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080007e  0080007e  000020ca  2**0
                  ALLOC
  3 .stab         00001adc  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e43  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000049eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000091e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
       6:	00 00       	nop
       8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
       a:	00 00       	nop
       c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
       e:	00 00       	nop
      10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_5>
      18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
      1e:	00 00       	nop
      20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
      22:	00 00       	nop
      24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
      32:	00 00       	nop
      34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
      36:	00 00       	nop
      38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
      3e:	00 00       	nop
      40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
      42:	00 00       	nop
      44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
      46:	00 00       	nop
      48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
      4e:	00 00       	nop
      50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <main>
      8a:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <_exit>

0000008e <__bad_interrupt>:
      8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <__fixunssfsi>:
      90:	ef 92       	push	r14
      92:	ff 92       	push	r15
      94:	0f 93       	push	r16
      96:	1f 93       	push	r17
      98:	7b 01       	movw	r14, r22
      9a:	8c 01       	movw	r16, r24
      9c:	20 e0       	ldi	r18, 0x00	; 0
      9e:	30 e0       	ldi	r19, 0x00	; 0
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	5f e4       	ldi	r21, 0x4F	; 79
      a4:	8c d3       	rcall	.+1816   	; 0x7be <__gesf2>
      a6:	88 23       	and	r24, r24
      a8:	7c f0       	brlt	.+30     	; 0xc8 <__fixunssfsi+0x38>
      aa:	c8 01       	movw	r24, r16
      ac:	b7 01       	movw	r22, r14
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	40 e0       	ldi	r20, 0x00	; 0
      b4:	5f e4       	ldi	r21, 0x4F	; 79
      b6:	60 d1       	rcall	.+704    	; 0x378 <__subsf3>
      b8:	dc d3       	rcall	.+1976   	; 0x872 <__fixsfsi>
      ba:	9b 01       	movw	r18, r22
      bc:	ac 01       	movw	r20, r24
      be:	20 50       	subi	r18, 0x00	; 0
      c0:	30 40       	sbci	r19, 0x00	; 0
      c2:	40 40       	sbci	r20, 0x00	; 0
      c4:	50 48       	sbci	r21, 0x80	; 128
      c6:	05 c0       	rjmp	.+10     	; 0xd2 <__fixunssfsi+0x42>
      c8:	c8 01       	movw	r24, r16
      ca:	b7 01       	movw	r22, r14
      cc:	d2 d3       	rcall	.+1956   	; 0x872 <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	b9 01       	movw	r22, r18
      d4:	ca 01       	movw	r24, r20
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	08 95       	ret

000000e0 <_fpadd_parts>:
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e6 e7       	ldi	r30, 0x76	; 118
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__>
      ec:	dc 01       	movw	r26, r24
      ee:	2b 01       	movw	r4, r22
      f0:	fa 01       	movw	r30, r20
      f2:	9c 91       	ld	r25, X
      f4:	92 30       	cpi	r25, 0x02	; 2
      f6:	08 f4       	brcc	.+2      	; 0xfa <_fpadd_parts+0x1a>
      f8:	39 c1       	rjmp	.+626    	; 0x36c <_fpadd_parts+0x28c>
      fa:	eb 01       	movw	r28, r22
      fc:	88 81       	ld	r24, Y
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x24>
     102:	33 c1       	rjmp	.+614    	; 0x36a <_fpadd_parts+0x28a>
     104:	94 30       	cpi	r25, 0x04	; 4
     106:	69 f4       	brne	.+26     	; 0x122 <_fpadd_parts+0x42>
     108:	84 30       	cpi	r24, 0x04	; 4
     10a:	09 f0       	breq	.+2      	; 0x10e <_fpadd_parts+0x2e>
     10c:	2f c1       	rjmp	.+606    	; 0x36c <_fpadd_parts+0x28c>
     10e:	11 96       	adiw	r26, 0x01	; 1
     110:	9c 91       	ld	r25, X
     112:	11 97       	sbiw	r26, 0x01	; 1
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	98 17       	cp	r25, r24
     118:	09 f4       	brne	.+2      	; 0x11c <_fpadd_parts+0x3c>
     11a:	28 c1       	rjmp	.+592    	; 0x36c <_fpadd_parts+0x28c>
     11c:	a6 e7       	ldi	r26, 0x76	; 118
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	25 c1       	rjmp	.+586    	; 0x36c <_fpadd_parts+0x28c>
     122:	84 30       	cpi	r24, 0x04	; 4
     124:	09 f4       	brne	.+2      	; 0x128 <_fpadd_parts+0x48>
     126:	21 c1       	rjmp	.+578    	; 0x36a <_fpadd_parts+0x28a>
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	a9 f4       	brne	.+42     	; 0x156 <_fpadd_parts+0x76>
     12c:	92 30       	cpi	r25, 0x02	; 2
     12e:	09 f0       	breq	.+2      	; 0x132 <_fpadd_parts+0x52>
     130:	1d c1       	rjmp	.+570    	; 0x36c <_fpadd_parts+0x28c>
     132:	9a 01       	movw	r18, r20
     134:	ad 01       	movw	r20, r26
     136:	88 e0       	ldi	r24, 0x08	; 8
     138:	ea 01       	movw	r28, r20
     13a:	09 90       	ld	r0, Y+
     13c:	ae 01       	movw	r20, r28
     13e:	e9 01       	movw	r28, r18
     140:	09 92       	st	Y+, r0
     142:	9e 01       	movw	r18, r28
     144:	81 50       	subi	r24, 0x01	; 1
     146:	c1 f7       	brne	.-16     	; 0x138 <_fpadd_parts+0x58>
     148:	e2 01       	movw	r28, r4
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	9c 91       	ld	r25, X
     150:	89 23       	and	r24, r25
     152:	81 83       	std	Z+1, r24	; 0x01
     154:	08 c1       	rjmp	.+528    	; 0x366 <_fpadd_parts+0x286>
     156:	92 30       	cpi	r25, 0x02	; 2
     158:	09 f4       	brne	.+2      	; 0x15c <_fpadd_parts+0x7c>
     15a:	07 c1       	rjmp	.+526    	; 0x36a <_fpadd_parts+0x28a>
     15c:	12 96       	adiw	r26, 0x02	; 2
     15e:	2d 90       	ld	r2, X+
     160:	3c 90       	ld	r3, X
     162:	13 97       	sbiw	r26, 0x03	; 3
     164:	eb 01       	movw	r28, r22
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	14 96       	adiw	r26, 0x04	; 4
     16c:	ad 90       	ld	r10, X+
     16e:	bd 90       	ld	r11, X+
     170:	cd 90       	ld	r12, X+
     172:	dc 90       	ld	r13, X
     174:	17 97       	sbiw	r26, 0x07	; 7
     176:	ec 80       	ldd	r14, Y+4	; 0x04
     178:	fd 80       	ldd	r15, Y+5	; 0x05
     17a:	0e 81       	ldd	r16, Y+6	; 0x06
     17c:	1f 81       	ldd	r17, Y+7	; 0x07
     17e:	91 01       	movw	r18, r2
     180:	28 1b       	sub	r18, r24
     182:	39 0b       	sbc	r19, r25
     184:	b9 01       	movw	r22, r18
     186:	37 ff       	sbrs	r19, 7
     188:	04 c0       	rjmp	.+8      	; 0x192 <_fpadd_parts+0xb2>
     18a:	66 27       	eor	r22, r22
     18c:	77 27       	eor	r23, r23
     18e:	62 1b       	sub	r22, r18
     190:	73 0b       	sbc	r23, r19
     192:	60 32       	cpi	r22, 0x20	; 32
     194:	71 05       	cpc	r23, r1
     196:	0c f0       	brlt	.+2      	; 0x19a <_fpadd_parts+0xba>
     198:	61 c0       	rjmp	.+194    	; 0x25c <_fpadd_parts+0x17c>
     19a:	12 16       	cp	r1, r18
     19c:	13 06       	cpc	r1, r19
     19e:	6c f5       	brge	.+90     	; 0x1fa <_fpadd_parts+0x11a>
     1a0:	37 01       	movw	r6, r14
     1a2:	48 01       	movw	r8, r16
     1a4:	06 2e       	mov	r0, r22
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <_fpadd_parts+0xd0>
     1a8:	96 94       	lsr	r9
     1aa:	87 94       	ror	r8
     1ac:	77 94       	ror	r7
     1ae:	67 94       	ror	r6
     1b0:	0a 94       	dec	r0
     1b2:	d2 f7       	brpl	.-12     	; 0x1a8 <_fpadd_parts+0xc8>
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xe6>
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	44 1f       	adc	r20, r20
     1c4:	55 1f       	adc	r21, r21
     1c6:	6a 95       	dec	r22
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xde>
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	30 40       	sbci	r19, 0x00	; 0
     1ce:	40 40       	sbci	r20, 0x00	; 0
     1d0:	50 40       	sbci	r21, 0x00	; 0
     1d2:	2e 21       	and	r18, r14
     1d4:	3f 21       	and	r19, r15
     1d6:	40 23       	and	r20, r16
     1d8:	51 23       	and	r21, r17
     1da:	21 15       	cp	r18, r1
     1dc:	31 05       	cpc	r19, r1
     1de:	41 05       	cpc	r20, r1
     1e0:	51 05       	cpc	r21, r1
     1e2:	21 f0       	breq	.+8      	; 0x1ec <_fpadd_parts+0x10c>
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	79 01       	movw	r14, r18
     1ee:	8a 01       	movw	r16, r20
     1f0:	e6 28       	or	r14, r6
     1f2:	f7 28       	or	r15, r7
     1f4:	08 29       	or	r16, r8
     1f6:	19 29       	or	r17, r9
     1f8:	3c c0       	rjmp	.+120    	; 0x272 <_fpadd_parts+0x192>
     1fa:	23 2b       	or	r18, r19
     1fc:	d1 f1       	breq	.+116    	; 0x272 <_fpadd_parts+0x192>
     1fe:	26 0e       	add	r2, r22
     200:	37 1e       	adc	r3, r23
     202:	35 01       	movw	r6, r10
     204:	46 01       	movw	r8, r12
     206:	06 2e       	mov	r0, r22
     208:	04 c0       	rjmp	.+8      	; 0x212 <_fpadd_parts+0x132>
     20a:	96 94       	lsr	r9
     20c:	87 94       	ror	r8
     20e:	77 94       	ror	r7
     210:	67 94       	ror	r6
     212:	0a 94       	dec	r0
     214:	d2 f7       	brpl	.-12     	; 0x20a <_fpadd_parts+0x12a>
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x148>
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	44 1f       	adc	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	6a 95       	dec	r22
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x140>
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	30 40       	sbci	r19, 0x00	; 0
     230:	40 40       	sbci	r20, 0x00	; 0
     232:	50 40       	sbci	r21, 0x00	; 0
     234:	2a 21       	and	r18, r10
     236:	3b 21       	and	r19, r11
     238:	4c 21       	and	r20, r12
     23a:	5d 21       	and	r21, r13
     23c:	21 15       	cp	r18, r1
     23e:	31 05       	cpc	r19, r1
     240:	41 05       	cpc	r20, r1
     242:	51 05       	cpc	r21, r1
     244:	21 f0       	breq	.+8      	; 0x24e <_fpadd_parts+0x16e>
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	59 01       	movw	r10, r18
     250:	6a 01       	movw	r12, r20
     252:	a6 28       	or	r10, r6
     254:	b7 28       	or	r11, r7
     256:	c8 28       	or	r12, r8
     258:	d9 28       	or	r13, r9
     25a:	0b c0       	rjmp	.+22     	; 0x272 <_fpadd_parts+0x192>
     25c:	82 15       	cp	r24, r2
     25e:	93 05       	cpc	r25, r3
     260:	2c f0       	brlt	.+10     	; 0x26c <_fpadd_parts+0x18c>
     262:	1c 01       	movw	r2, r24
     264:	aa 24       	eor	r10, r10
     266:	bb 24       	eor	r11, r11
     268:	65 01       	movw	r12, r10
     26a:	03 c0       	rjmp	.+6      	; 0x272 <_fpadd_parts+0x192>
     26c:	ee 24       	eor	r14, r14
     26e:	ff 24       	eor	r15, r15
     270:	87 01       	movw	r16, r14
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	9c 91       	ld	r25, X
     276:	d2 01       	movw	r26, r4
     278:	11 96       	adiw	r26, 0x01	; 1
     27a:	8c 91       	ld	r24, X
     27c:	98 17       	cp	r25, r24
     27e:	09 f4       	brne	.+2      	; 0x282 <_fpadd_parts+0x1a2>
     280:	45 c0       	rjmp	.+138    	; 0x30c <_fpadd_parts+0x22c>
     282:	99 23       	and	r25, r25
     284:	39 f0       	breq	.+14     	; 0x294 <_fpadd_parts+0x1b4>
     286:	a8 01       	movw	r20, r16
     288:	97 01       	movw	r18, r14
     28a:	2a 19       	sub	r18, r10
     28c:	3b 09       	sbc	r19, r11
     28e:	4c 09       	sbc	r20, r12
     290:	5d 09       	sbc	r21, r13
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <_fpadd_parts+0x1c0>
     294:	a6 01       	movw	r20, r12
     296:	95 01       	movw	r18, r10
     298:	2e 19       	sub	r18, r14
     29a:	3f 09       	sbc	r19, r15
     29c:	40 0b       	sbc	r20, r16
     29e:	51 0b       	sbc	r21, r17
     2a0:	57 fd       	sbrc	r21, 7
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_fpadd_parts+0x1d4>
     2a4:	11 82       	std	Z+1, r1	; 0x01
     2a6:	33 82       	std	Z+3, r3	; 0x03
     2a8:	22 82       	std	Z+2, r2	; 0x02
     2aa:	24 83       	std	Z+4, r18	; 0x04
     2ac:	35 83       	std	Z+5, r19	; 0x05
     2ae:	46 83       	std	Z+6, r20	; 0x06
     2b0:	57 83       	std	Z+7, r21	; 0x07
     2b2:	1d c0       	rjmp	.+58     	; 0x2ee <_fpadd_parts+0x20e>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	81 83       	std	Z+1, r24	; 0x01
     2b8:	33 82       	std	Z+3, r3	; 0x03
     2ba:	22 82       	std	Z+2, r2	; 0x02
     2bc:	88 27       	eor	r24, r24
     2be:	99 27       	eor	r25, r25
     2c0:	dc 01       	movw	r26, r24
     2c2:	82 1b       	sub	r24, r18
     2c4:	93 0b       	sbc	r25, r19
     2c6:	a4 0b       	sbc	r26, r20
     2c8:	b5 0b       	sbc	r27, r21
     2ca:	84 83       	std	Z+4, r24	; 0x04
     2cc:	95 83       	std	Z+5, r25	; 0x05
     2ce:	a6 83       	std	Z+6, r26	; 0x06
     2d0:	b7 83       	std	Z+7, r27	; 0x07
     2d2:	0d c0       	rjmp	.+26     	; 0x2ee <_fpadd_parts+0x20e>
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	44 1f       	adc	r20, r20
     2da:	55 1f       	adc	r21, r21
     2dc:	24 83       	std	Z+4, r18	; 0x04
     2de:	35 83       	std	Z+5, r19	; 0x05
     2e0:	46 83       	std	Z+6, r20	; 0x06
     2e2:	57 83       	std	Z+7, r21	; 0x07
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	93 81       	ldd	r25, Z+3	; 0x03
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	93 83       	std	Z+3, r25	; 0x03
     2ec:	82 83       	std	Z+2, r24	; 0x02
     2ee:	24 81       	ldd	r18, Z+4	; 0x04
     2f0:	35 81       	ldd	r19, Z+5	; 0x05
     2f2:	46 81       	ldd	r20, Z+6	; 0x06
     2f4:	57 81       	ldd	r21, Z+7	; 0x07
     2f6:	da 01       	movw	r26, r20
     2f8:	c9 01       	movw	r24, r18
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	a1 09       	sbc	r26, r1
     2fe:	b1 09       	sbc	r27, r1
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	9f 4f       	sbci	r25, 0xFF	; 255
     304:	af 4f       	sbci	r26, 0xFF	; 255
     306:	bf 43       	sbci	r27, 0x3F	; 63
     308:	28 f3       	brcs	.-54     	; 0x2d4 <_fpadd_parts+0x1f4>
     30a:	0b c0       	rjmp	.+22     	; 0x322 <_fpadd_parts+0x242>
     30c:	91 83       	std	Z+1, r25	; 0x01
     30e:	33 82       	std	Z+3, r3	; 0x03
     310:	22 82       	std	Z+2, r2	; 0x02
     312:	ea 0c       	add	r14, r10
     314:	fb 1c       	adc	r15, r11
     316:	0c 1d       	adc	r16, r12
     318:	1d 1d       	adc	r17, r13
     31a:	e4 82       	std	Z+4, r14	; 0x04
     31c:	f5 82       	std	Z+5, r15	; 0x05
     31e:	06 83       	std	Z+6, r16	; 0x06
     320:	17 83       	std	Z+7, r17	; 0x07
     322:	83 e0       	ldi	r24, 0x03	; 3
     324:	80 83       	st	Z, r24
     326:	24 81       	ldd	r18, Z+4	; 0x04
     328:	35 81       	ldd	r19, Z+5	; 0x05
     32a:	46 81       	ldd	r20, Z+6	; 0x06
     32c:	57 81       	ldd	r21, Z+7	; 0x07
     32e:	57 ff       	sbrs	r21, 7
     330:	1a c0       	rjmp	.+52     	; 0x366 <_fpadd_parts+0x286>
     332:	c9 01       	movw	r24, r18
     334:	aa 27       	eor	r26, r26
     336:	97 fd       	sbrc	r25, 7
     338:	a0 95       	com	r26
     33a:	ba 2f       	mov	r27, r26
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 70       	andi	r25, 0x00	; 0
     340:	a0 70       	andi	r26, 0x00	; 0
     342:	b0 70       	andi	r27, 0x00	; 0
     344:	56 95       	lsr	r21
     346:	47 95       	ror	r20
     348:	37 95       	ror	r19
     34a:	27 95       	ror	r18
     34c:	82 2b       	or	r24, r18
     34e:	93 2b       	or	r25, r19
     350:	a4 2b       	or	r26, r20
     352:	b5 2b       	or	r27, r21
     354:	84 83       	std	Z+4, r24	; 0x04
     356:	95 83       	std	Z+5, r25	; 0x05
     358:	a6 83       	std	Z+6, r26	; 0x06
     35a:	b7 83       	std	Z+7, r27	; 0x07
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	93 83       	std	Z+3, r25	; 0x03
     364:	82 83       	std	Z+2, r24	; 0x02
     366:	df 01       	movw	r26, r30
     368:	01 c0       	rjmp	.+2      	; 0x36c <_fpadd_parts+0x28c>
     36a:	d2 01       	movw	r26, r4
     36c:	cd 01       	movw	r24, r26
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	e2 e1       	ldi	r30, 0x12	; 18
     374:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__>

00000378 <__subsf3>:
     378:	a0 e2       	ldi	r26, 0x20	; 32
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e2 ec       	ldi	r30, 0xC2	; 194
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__prologue_saves__+0x18>
     384:	69 83       	std	Y+1, r22	; 0x01
     386:	7a 83       	std	Y+2, r23	; 0x02
     388:	8b 83       	std	Y+3, r24	; 0x03
     38a:	9c 83       	std	Y+4, r25	; 0x04
     38c:	2d 83       	std	Y+5, r18	; 0x05
     38e:	3e 83       	std	Y+6, r19	; 0x06
     390:	4f 83       	std	Y+7, r20	; 0x07
     392:	58 87       	std	Y+8, r21	; 0x08
     394:	e9 e0       	ldi	r30, 0x09	; 9
     396:	ee 2e       	mov	r14, r30
     398:	f1 2c       	mov	r15, r1
     39a:	ec 0e       	add	r14, r28
     39c:	fd 1e       	adc	r15, r29
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	b7 01       	movw	r22, r14
     3a4:	8e d3       	rcall	.+1820   	; 0xac2 <__unpack_f>
     3a6:	8e 01       	movw	r16, r28
     3a8:	0f 5e       	subi	r16, 0xEF	; 239
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	ce 01       	movw	r24, r28
     3ae:	05 96       	adiw	r24, 0x05	; 5
     3b0:	b8 01       	movw	r22, r16
     3b2:	87 d3       	rcall	.+1806   	; 0xac2 <__unpack_f>
     3b4:	8a 89       	ldd	r24, Y+18	; 0x12
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	89 27       	eor	r24, r25
     3ba:	8a 8b       	std	Y+18, r24	; 0x12
     3bc:	c7 01       	movw	r24, r14
     3be:	b8 01       	movw	r22, r16
     3c0:	ae 01       	movw	r20, r28
     3c2:	47 5e       	subi	r20, 0xE7	; 231
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	8c de       	rcall	.-744    	; 0xe0 <_fpadd_parts>
     3c8:	a7 d2       	rcall	.+1358   	; 0x918 <__pack_f>
     3ca:	a0 96       	adiw	r28, 0x20	; 32
     3cc:	e6 e0       	ldi	r30, 0x06	; 6
     3ce:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__epilogue_restores__+0x18>

000003d2 <__addsf3>:
     3d2:	a0 e2       	ldi	r26, 0x20	; 32
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	ef ee       	ldi	r30, 0xEF	; 239
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__prologue_saves__+0x18>
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	7a 83       	std	Y+2, r23	; 0x02
     3e2:	8b 83       	std	Y+3, r24	; 0x03
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	2d 83       	std	Y+5, r18	; 0x05
     3e8:	3e 83       	std	Y+6, r19	; 0x06
     3ea:	4f 83       	std	Y+7, r20	; 0x07
     3ec:	58 87       	std	Y+8, r21	; 0x08
     3ee:	f9 e0       	ldi	r31, 0x09	; 9
     3f0:	ef 2e       	mov	r14, r31
     3f2:	f1 2c       	mov	r15, r1
     3f4:	ec 0e       	add	r14, r28
     3f6:	fd 1e       	adc	r15, r29
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	b7 01       	movw	r22, r14
     3fe:	61 d3       	rcall	.+1730   	; 0xac2 <__unpack_f>
     400:	8e 01       	movw	r16, r28
     402:	0f 5e       	subi	r16, 0xEF	; 239
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	ce 01       	movw	r24, r28
     408:	05 96       	adiw	r24, 0x05	; 5
     40a:	b8 01       	movw	r22, r16
     40c:	5a d3       	rcall	.+1716   	; 0xac2 <__unpack_f>
     40e:	c7 01       	movw	r24, r14
     410:	b8 01       	movw	r22, r16
     412:	ae 01       	movw	r20, r28
     414:	47 5e       	subi	r20, 0xE7	; 231
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	63 de       	rcall	.-826    	; 0xe0 <_fpadd_parts>
     41a:	7e d2       	rcall	.+1276   	; 0x918 <__pack_f>
     41c:	a0 96       	adiw	r28, 0x20	; 32
     41e:	e6 e0       	ldi	r30, 0x06	; 6
     420:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__epilogue_restores__+0x18>

00000424 <__mulsf3>:
     424:	a0 e2       	ldi	r26, 0x20	; 32
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e8 e1       	ldi	r30, 0x18	; 24
     42a:	f2 e0       	ldi	r31, 0x02	; 2
     42c:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__>
     430:	69 83       	std	Y+1, r22	; 0x01
     432:	7a 83       	std	Y+2, r23	; 0x02
     434:	8b 83       	std	Y+3, r24	; 0x03
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	2d 83       	std	Y+5, r18	; 0x05
     43a:	3e 83       	std	Y+6, r19	; 0x06
     43c:	4f 83       	std	Y+7, r20	; 0x07
     43e:	58 87       	std	Y+8, r21	; 0x08
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	be 01       	movw	r22, r28
     446:	67 5f       	subi	r22, 0xF7	; 247
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	3b d3       	rcall	.+1654   	; 0xac2 <__unpack_f>
     44c:	ce 01       	movw	r24, r28
     44e:	05 96       	adiw	r24, 0x05	; 5
     450:	be 01       	movw	r22, r28
     452:	6f 5e       	subi	r22, 0xEF	; 239
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	35 d3       	rcall	.+1642   	; 0xac2 <__unpack_f>
     458:	99 85       	ldd	r25, Y+9	; 0x09
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	88 f0       	brcs	.+34     	; 0x480 <__stack+0x21>
     45e:	89 89       	ldd	r24, Y+17	; 0x11
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	c8 f0       	brcs	.+50     	; 0x496 <__stack+0x37>
     464:	94 30       	cpi	r25, 0x04	; 4
     466:	19 f4       	brne	.+6      	; 0x46e <__stack+0xf>
     468:	82 30       	cpi	r24, 0x02	; 2
     46a:	51 f4       	brne	.+20     	; 0x480 <__stack+0x21>
     46c:	04 c0       	rjmp	.+8      	; 0x476 <__stack+0x17>
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	29 f4       	brne	.+10     	; 0x47c <__stack+0x1d>
     472:	92 30       	cpi	r25, 0x02	; 2
     474:	81 f4       	brne	.+32     	; 0x496 <__stack+0x37>
     476:	86 e7       	ldi	r24, 0x76	; 118
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	c6 c0       	rjmp	.+396    	; 0x608 <__stack+0x1a9>
     47c:	92 30       	cpi	r25, 0x02	; 2
     47e:	49 f4       	brne	.+18     	; 0x492 <__stack+0x33>
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	9a 85       	ldd	r25, Y+10	; 0x0a
     484:	8a 89       	ldd	r24, Y+18	; 0x12
     486:	98 13       	cpse	r25, r24
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	2a 87       	std	Y+10, r18	; 0x0a
     48c:	ce 01       	movw	r24, r28
     48e:	09 96       	adiw	r24, 0x09	; 9
     490:	bb c0       	rjmp	.+374    	; 0x608 <__stack+0x1a9>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	49 f4       	brne	.+18     	; 0x4a8 <__stack+0x49>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	8a 89       	ldd	r24, Y+18	; 0x12
     49c:	98 13       	cpse	r25, r24
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	2a 8b       	std	Y+18, r18	; 0x12
     4a2:	ce 01       	movw	r24, r28
     4a4:	41 96       	adiw	r24, 0x11	; 17
     4a6:	b0 c0       	rjmp	.+352    	; 0x608 <__stack+0x1a9>
     4a8:	2d 84       	ldd	r2, Y+13	; 0x0d
     4aa:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ac:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ae:	58 88       	ldd	r5, Y+16	; 0x10
     4b0:	6d 88       	ldd	r6, Y+21	; 0x15
     4b2:	7e 88       	ldd	r7, Y+22	; 0x16
     4b4:	8f 88       	ldd	r8, Y+23	; 0x17
     4b6:	98 8c       	ldd	r9, Y+24	; 0x18
     4b8:	ee 24       	eor	r14, r14
     4ba:	ff 24       	eor	r15, r15
     4bc:	87 01       	movw	r16, r14
     4be:	aa 24       	eor	r10, r10
     4c0:	bb 24       	eor	r11, r11
     4c2:	65 01       	movw	r12, r10
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	e0 e0       	ldi	r30, 0x00	; 0
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	c1 01       	movw	r24, r2
     4d2:	81 70       	andi	r24, 0x01	; 1
     4d4:	90 70       	andi	r25, 0x00	; 0
     4d6:	89 2b       	or	r24, r25
     4d8:	e9 f0       	breq	.+58     	; 0x514 <__stack+0xb5>
     4da:	e6 0c       	add	r14, r6
     4dc:	f7 1c       	adc	r15, r7
     4de:	08 1d       	adc	r16, r8
     4e0:	19 1d       	adc	r17, r9
     4e2:	9a 01       	movw	r18, r20
     4e4:	ab 01       	movw	r20, r22
     4e6:	2a 0d       	add	r18, r10
     4e8:	3b 1d       	adc	r19, r11
     4ea:	4c 1d       	adc	r20, r12
     4ec:	5d 1d       	adc	r21, r13
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	a0 e0       	ldi	r26, 0x00	; 0
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	e6 14       	cp	r14, r6
     4f8:	f7 04       	cpc	r15, r7
     4fa:	08 05       	cpc	r16, r8
     4fc:	19 05       	cpc	r17, r9
     4fe:	20 f4       	brcc	.+8      	; 0x508 <__stack+0xa9>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a0 e0       	ldi	r26, 0x00	; 0
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	ba 01       	movw	r22, r20
     50a:	a9 01       	movw	r20, r18
     50c:	48 0f       	add	r20, r24
     50e:	59 1f       	adc	r21, r25
     510:	6a 1f       	adc	r22, r26
     512:	7b 1f       	adc	r23, r27
     514:	aa 0c       	add	r10, r10
     516:	bb 1c       	adc	r11, r11
     518:	cc 1c       	adc	r12, r12
     51a:	dd 1c       	adc	r13, r13
     51c:	97 fe       	sbrs	r9, 7
     51e:	08 c0       	rjmp	.+16     	; 0x530 <__stack+0xd1>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	a0 e0       	ldi	r26, 0x00	; 0
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	a8 2a       	or	r10, r24
     52a:	b9 2a       	or	r11, r25
     52c:	ca 2a       	or	r12, r26
     52e:	db 2a       	or	r13, r27
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	e0 32       	cpi	r30, 0x20	; 32
     534:	f1 05       	cpc	r31, r1
     536:	49 f0       	breq	.+18     	; 0x54a <__stack+0xeb>
     538:	66 0c       	add	r6, r6
     53a:	77 1c       	adc	r7, r7
     53c:	88 1c       	adc	r8, r8
     53e:	99 1c       	adc	r9, r9
     540:	56 94       	lsr	r5
     542:	47 94       	ror	r4
     544:	37 94       	ror	r3
     546:	27 94       	ror	r2
     548:	c3 cf       	rjmp	.-122    	; 0x4d0 <__stack+0x71>
     54a:	fa 85       	ldd	r31, Y+10	; 0x0a
     54c:	ea 89       	ldd	r30, Y+18	; 0x12
     54e:	2b 89       	ldd	r18, Y+19	; 0x13
     550:	3c 89       	ldd	r19, Y+20	; 0x14
     552:	8b 85       	ldd	r24, Y+11	; 0x0b
     554:	9c 85       	ldd	r25, Y+12	; 0x0c
     556:	28 0f       	add	r18, r24
     558:	39 1f       	adc	r19, r25
     55a:	2e 5f       	subi	r18, 0xFE	; 254
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	17 c0       	rjmp	.+46     	; 0x58e <__stack+0x12f>
     560:	ca 01       	movw	r24, r20
     562:	81 70       	andi	r24, 0x01	; 1
     564:	90 70       	andi	r25, 0x00	; 0
     566:	89 2b       	or	r24, r25
     568:	61 f0       	breq	.+24     	; 0x582 <__stack+0x123>
     56a:	16 95       	lsr	r17
     56c:	07 95       	ror	r16
     56e:	f7 94       	ror	r15
     570:	e7 94       	ror	r14
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b0 e8       	ldi	r27, 0x80	; 128
     57a:	e8 2a       	or	r14, r24
     57c:	f9 2a       	or	r15, r25
     57e:	0a 2b       	or	r16, r26
     580:	1b 2b       	or	r17, r27
     582:	76 95       	lsr	r23
     584:	67 95       	ror	r22
     586:	57 95       	ror	r21
     588:	47 95       	ror	r20
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	77 fd       	sbrc	r23, 7
     590:	e7 cf       	rjmp	.-50     	; 0x560 <__stack+0x101>
     592:	0c c0       	rjmp	.+24     	; 0x5ac <__stack+0x14d>
     594:	44 0f       	add	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	66 1f       	adc	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	17 fd       	sbrc	r17, 7
     59e:	41 60       	ori	r20, 0x01	; 1
     5a0:	ee 0c       	add	r14, r14
     5a2:	ff 1c       	adc	r15, r15
     5a4:	00 1f       	adc	r16, r16
     5a6:	11 1f       	adc	r17, r17
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	30 40       	sbci	r19, 0x00	; 0
     5ac:	40 30       	cpi	r20, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	59 07       	cpc	r21, r25
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	69 07       	cpc	r22, r25
     5b6:	90 e4       	ldi	r25, 0x40	; 64
     5b8:	79 07       	cpc	r23, r25
     5ba:	60 f3       	brcs	.-40     	; 0x594 <__stack+0x135>
     5bc:	2b 8f       	std	Y+27, r18	; 0x1b
     5be:	3c 8f       	std	Y+28, r19	; 0x1c
     5c0:	db 01       	movw	r26, r22
     5c2:	ca 01       	movw	r24, r20
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__stack+0x18f>
     5d6:	47 fd       	sbrc	r20, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__stack+0x18f>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__stack+0x18f>
     5e4:	40 5c       	subi	r20, 0xC0	; 192
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f 4f       	sbci	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	40 78       	andi	r20, 0x80	; 128
     5ee:	1a 8e       	std	Y+26, r1	; 0x1a
     5f0:	fe 17       	cp	r31, r30
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <__stack+0x199>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8a 8f       	std	Y+26, r24	; 0x1a
     5f8:	4d 8f       	std	Y+29, r20	; 0x1d
     5fa:	5e 8f       	std	Y+30, r21	; 0x1e
     5fc:	6f 8f       	std	Y+31, r22	; 0x1f
     5fe:	78 a3       	std	Y+32, r23	; 0x20
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	89 8f       	std	Y+25, r24	; 0x19
     604:	ce 01       	movw	r24, r28
     606:	49 96       	adiw	r24, 0x19	; 25
     608:	87 d1       	rcall	.+782    	; 0x918 <__pack_f>
     60a:	a0 96       	adiw	r28, 0x20	; 32
     60c:	e2 e1       	ldi	r30, 0x12	; 18
     60e:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__>

00000612 <__divsf3>:
     612:	a8 e1       	ldi	r26, 0x18	; 24
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	ef e0       	ldi	r30, 0x0F	; 15
     618:	f3 e0       	ldi	r31, 0x03	; 3
     61a:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x10>
     61e:	69 83       	std	Y+1, r22	; 0x01
     620:	7a 83       	std	Y+2, r23	; 0x02
     622:	8b 83       	std	Y+3, r24	; 0x03
     624:	9c 83       	std	Y+4, r25	; 0x04
     626:	2d 83       	std	Y+5, r18	; 0x05
     628:	3e 83       	std	Y+6, r19	; 0x06
     62a:	4f 83       	std	Y+7, r20	; 0x07
     62c:	58 87       	std	Y+8, r21	; 0x08
     62e:	b9 e0       	ldi	r27, 0x09	; 9
     630:	eb 2e       	mov	r14, r27
     632:	f1 2c       	mov	r15, r1
     634:	ec 0e       	add	r14, r28
     636:	fd 1e       	adc	r15, r29
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	b7 01       	movw	r22, r14
     63e:	41 d2       	rcall	.+1154   	; 0xac2 <__unpack_f>
     640:	8e 01       	movw	r16, r28
     642:	0f 5e       	subi	r16, 0xEF	; 239
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	ce 01       	movw	r24, r28
     648:	05 96       	adiw	r24, 0x05	; 5
     64a:	b8 01       	movw	r22, r16
     64c:	3a d2       	rcall	.+1140   	; 0xac2 <__unpack_f>
     64e:	29 85       	ldd	r18, Y+9	; 0x09
     650:	22 30       	cpi	r18, 0x02	; 2
     652:	08 f4       	brcc	.+2      	; 0x656 <__divsf3+0x44>
     654:	7e c0       	rjmp	.+252    	; 0x752 <__divsf3+0x140>
     656:	39 89       	ldd	r19, Y+17	; 0x11
     658:	32 30       	cpi	r19, 0x02	; 2
     65a:	10 f4       	brcc	.+4      	; 0x660 <__divsf3+0x4e>
     65c:	b8 01       	movw	r22, r16
     65e:	7c c0       	rjmp	.+248    	; 0x758 <__divsf3+0x146>
     660:	8a 85       	ldd	r24, Y+10	; 0x0a
     662:	9a 89       	ldd	r25, Y+18	; 0x12
     664:	89 27       	eor	r24, r25
     666:	8a 87       	std	Y+10, r24	; 0x0a
     668:	24 30       	cpi	r18, 0x04	; 4
     66a:	11 f0       	breq	.+4      	; 0x670 <__divsf3+0x5e>
     66c:	22 30       	cpi	r18, 0x02	; 2
     66e:	31 f4       	brne	.+12     	; 0x67c <__divsf3+0x6a>
     670:	23 17       	cp	r18, r19
     672:	09 f0       	breq	.+2      	; 0x676 <__divsf3+0x64>
     674:	6e c0       	rjmp	.+220    	; 0x752 <__divsf3+0x140>
     676:	66 e7       	ldi	r22, 0x76	; 118
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	6e c0       	rjmp	.+220    	; 0x758 <__divsf3+0x146>
     67c:	34 30       	cpi	r19, 0x04	; 4
     67e:	39 f4       	brne	.+14     	; 0x68e <__divsf3+0x7c>
     680:	1d 86       	std	Y+13, r1	; 0x0d
     682:	1e 86       	std	Y+14, r1	; 0x0e
     684:	1f 86       	std	Y+15, r1	; 0x0f
     686:	18 8a       	std	Y+16, r1	; 0x10
     688:	1c 86       	std	Y+12, r1	; 0x0c
     68a:	1b 86       	std	Y+11, r1	; 0x0b
     68c:	04 c0       	rjmp	.+8      	; 0x696 <__divsf3+0x84>
     68e:	32 30       	cpi	r19, 0x02	; 2
     690:	21 f4       	brne	.+8      	; 0x69a <__divsf3+0x88>
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	89 87       	std	Y+9, r24	; 0x09
     696:	b7 01       	movw	r22, r14
     698:	5f c0       	rjmp	.+190    	; 0x758 <__divsf3+0x146>
     69a:	2b 85       	ldd	r18, Y+11	; 0x0b
     69c:	3c 85       	ldd	r19, Y+12	; 0x0c
     69e:	8b 89       	ldd	r24, Y+19	; 0x13
     6a0:	9c 89       	ldd	r25, Y+20	; 0x14
     6a2:	28 1b       	sub	r18, r24
     6a4:	39 0b       	sbc	r19, r25
     6a6:	3c 87       	std	Y+12, r19	; 0x0c
     6a8:	2b 87       	std	Y+11, r18	; 0x0b
     6aa:	ed 84       	ldd	r14, Y+13	; 0x0d
     6ac:	fe 84       	ldd	r15, Y+14	; 0x0e
     6ae:	0f 85       	ldd	r16, Y+15	; 0x0f
     6b0:	18 89       	ldd	r17, Y+16	; 0x10
     6b2:	ad 88       	ldd	r10, Y+21	; 0x15
     6b4:	be 88       	ldd	r11, Y+22	; 0x16
     6b6:	cf 88       	ldd	r12, Y+23	; 0x17
     6b8:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ba:	ea 14       	cp	r14, r10
     6bc:	fb 04       	cpc	r15, r11
     6be:	0c 05       	cpc	r16, r12
     6c0:	1d 05       	cpc	r17, r13
     6c2:	40 f4       	brcc	.+16     	; 0x6d4 <__divsf3+0xc2>
     6c4:	ee 0c       	add	r14, r14
     6c6:	ff 1c       	adc	r15, r15
     6c8:	00 1f       	adc	r16, r16
     6ca:	11 1f       	adc	r17, r17
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	30 40       	sbci	r19, 0x00	; 0
     6d0:	3c 87       	std	Y+12, r19	; 0x0c
     6d2:	2b 87       	std	Y+11, r18	; 0x0b
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b0 e4       	ldi	r27, 0x40	; 64
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	ea 14       	cp	r14, r10
     6ea:	fb 04       	cpc	r15, r11
     6ec:	0c 05       	cpc	r16, r12
     6ee:	1d 05       	cpc	r17, r13
     6f0:	40 f0       	brcs	.+16     	; 0x702 <__divsf3+0xf0>
     6f2:	28 2b       	or	r18, r24
     6f4:	39 2b       	or	r19, r25
     6f6:	4a 2b       	or	r20, r26
     6f8:	5b 2b       	or	r21, r27
     6fa:	ea 18       	sub	r14, r10
     6fc:	fb 08       	sbc	r15, r11
     6fe:	0c 09       	sbc	r16, r12
     700:	1d 09       	sbc	r17, r13
     702:	b6 95       	lsr	r27
     704:	a7 95       	ror	r26
     706:	97 95       	ror	r25
     708:	87 95       	ror	r24
     70a:	ee 0c       	add	r14, r14
     70c:	ff 1c       	adc	r15, r15
     70e:	00 1f       	adc	r16, r16
     710:	11 1f       	adc	r17, r17
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	6f 31       	cpi	r22, 0x1F	; 31
     718:	71 05       	cpc	r23, r1
     71a:	31 f7       	brne	.-52     	; 0x6e8 <__divsf3+0xd6>
     71c:	da 01       	movw	r26, r20
     71e:	c9 01       	movw	r24, r18
     720:	8f 77       	andi	r24, 0x7F	; 127
     722:	90 70       	andi	r25, 0x00	; 0
     724:	a0 70       	andi	r26, 0x00	; 0
     726:	b0 70       	andi	r27, 0x00	; 0
     728:	80 34       	cpi	r24, 0x40	; 64
     72a:	91 05       	cpc	r25, r1
     72c:	a1 05       	cpc	r26, r1
     72e:	b1 05       	cpc	r27, r1
     730:	61 f4       	brne	.+24     	; 0x74a <__divsf3+0x138>
     732:	27 fd       	sbrc	r18, 7
     734:	0a c0       	rjmp	.+20     	; 0x74a <__divsf3+0x138>
     736:	e1 14       	cp	r14, r1
     738:	f1 04       	cpc	r15, r1
     73a:	01 05       	cpc	r16, r1
     73c:	11 05       	cpc	r17, r1
     73e:	29 f0       	breq	.+10     	; 0x74a <__divsf3+0x138>
     740:	20 5c       	subi	r18, 0xC0	; 192
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	4f 4f       	sbci	r20, 0xFF	; 255
     746:	5f 4f       	sbci	r21, 0xFF	; 255
     748:	20 78       	andi	r18, 0x80	; 128
     74a:	2d 87       	std	Y+13, r18	; 0x0d
     74c:	3e 87       	std	Y+14, r19	; 0x0e
     74e:	4f 87       	std	Y+15, r20	; 0x0f
     750:	58 8b       	std	Y+16, r21	; 0x10
     752:	be 01       	movw	r22, r28
     754:	67 5f       	subi	r22, 0xF7	; 247
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	cb 01       	movw	r24, r22
     75a:	de d0       	rcall	.+444    	; 0x918 <__pack_f>
     75c:	68 96       	adiw	r28, 0x18	; 24
     75e:	ea e0       	ldi	r30, 0x0A	; 10
     760:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x10>

00000764 <__gtsf2>:
     764:	a8 e1       	ldi	r26, 0x18	; 24
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e8 eb       	ldi	r30, 0xB8	; 184
     76a:	f3 e0       	ldi	r31, 0x03	; 3
     76c:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__prologue_saves__+0x18>
     770:	69 83       	std	Y+1, r22	; 0x01
     772:	7a 83       	std	Y+2, r23	; 0x02
     774:	8b 83       	std	Y+3, r24	; 0x03
     776:	9c 83       	std	Y+4, r25	; 0x04
     778:	2d 83       	std	Y+5, r18	; 0x05
     77a:	3e 83       	std	Y+6, r19	; 0x06
     77c:	4f 83       	std	Y+7, r20	; 0x07
     77e:	58 87       	std	Y+8, r21	; 0x08
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	e8 2e       	mov	r14, r24
     784:	f1 2c       	mov	r15, r1
     786:	ec 0e       	add	r14, r28
     788:	fd 1e       	adc	r15, r29
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	b7 01       	movw	r22, r14
     790:	98 d1       	rcall	.+816    	; 0xac2 <__unpack_f>
     792:	8e 01       	movw	r16, r28
     794:	0f 5e       	subi	r16, 0xEF	; 239
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	ce 01       	movw	r24, r28
     79a:	05 96       	adiw	r24, 0x05	; 5
     79c:	b8 01       	movw	r22, r16
     79e:	91 d1       	rcall	.+802    	; 0xac2 <__unpack_f>
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	38 f0       	brcs	.+14     	; 0x7b4 <__gtsf2+0x50>
     7a6:	89 89       	ldd	r24, Y+17	; 0x11
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__gtsf2+0x50>
     7ac:	c7 01       	movw	r24, r14
     7ae:	b8 01       	movw	r22, r16
     7b0:	00 d2       	rcall	.+1024   	; 0xbb2 <__fpcmp_parts_f>
     7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <__gtsf2+0x52>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	68 96       	adiw	r28, 0x18	; 24
     7b8:	e6 e0       	ldi	r30, 0x06	; 6
     7ba:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__epilogue_restores__+0x18>

000007be <__gesf2>:
     7be:	a8 e1       	ldi	r26, 0x18	; 24
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	e5 ee       	ldi	r30, 0xE5	; 229
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__prologue_saves__+0x18>
     7ca:	69 83       	std	Y+1, r22	; 0x01
     7cc:	7a 83       	std	Y+2, r23	; 0x02
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	9c 83       	std	Y+4, r25	; 0x04
     7d2:	2d 83       	std	Y+5, r18	; 0x05
     7d4:	3e 83       	std	Y+6, r19	; 0x06
     7d6:	4f 83       	std	Y+7, r20	; 0x07
     7d8:	58 87       	std	Y+8, r21	; 0x08
     7da:	89 e0       	ldi	r24, 0x09	; 9
     7dc:	e8 2e       	mov	r14, r24
     7de:	f1 2c       	mov	r15, r1
     7e0:	ec 0e       	add	r14, r28
     7e2:	fd 1e       	adc	r15, r29
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	b7 01       	movw	r22, r14
     7ea:	6b d1       	rcall	.+726    	; 0xac2 <__unpack_f>
     7ec:	8e 01       	movw	r16, r28
     7ee:	0f 5e       	subi	r16, 0xEF	; 239
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
     7f2:	ce 01       	movw	r24, r28
     7f4:	05 96       	adiw	r24, 0x05	; 5
     7f6:	b8 01       	movw	r22, r16
     7f8:	64 d1       	rcall	.+712    	; 0xac2 <__unpack_f>
     7fa:	89 85       	ldd	r24, Y+9	; 0x09
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	38 f0       	brcs	.+14     	; 0x80e <__gesf2+0x50>
     800:	89 89       	ldd	r24, Y+17	; 0x11
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	20 f0       	brcs	.+8      	; 0x80e <__gesf2+0x50>
     806:	c7 01       	movw	r24, r14
     808:	b8 01       	movw	r22, r16
     80a:	d3 d1       	rcall	.+934    	; 0xbb2 <__fpcmp_parts_f>
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__gesf2+0x52>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	68 96       	adiw	r28, 0x18	; 24
     812:	e6 e0       	ldi	r30, 0x06	; 6
     814:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__epilogue_restores__+0x18>

00000818 <__ltsf2>:
     818:	a8 e1       	ldi	r26, 0x18	; 24
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	e2 e1       	ldi	r30, 0x12	; 18
     81e:	f4 e0       	ldi	r31, 0x04	; 4
     820:	0c 94 9c 0f 	jmp	0x1f38	; 0x1f38 <__prologue_saves__+0x18>
     824:	69 83       	std	Y+1, r22	; 0x01
     826:	7a 83       	std	Y+2, r23	; 0x02
     828:	8b 83       	std	Y+3, r24	; 0x03
     82a:	9c 83       	std	Y+4, r25	; 0x04
     82c:	2d 83       	std	Y+5, r18	; 0x05
     82e:	3e 83       	std	Y+6, r19	; 0x06
     830:	4f 83       	std	Y+7, r20	; 0x07
     832:	58 87       	std	Y+8, r21	; 0x08
     834:	89 e0       	ldi	r24, 0x09	; 9
     836:	e8 2e       	mov	r14, r24
     838:	f1 2c       	mov	r15, r1
     83a:	ec 0e       	add	r14, r28
     83c:	fd 1e       	adc	r15, r29
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	b7 01       	movw	r22, r14
     844:	3e d1       	rcall	.+636    	; 0xac2 <__unpack_f>
     846:	8e 01       	movw	r16, r28
     848:	0f 5e       	subi	r16, 0xEF	; 239
     84a:	1f 4f       	sbci	r17, 0xFF	; 255
     84c:	ce 01       	movw	r24, r28
     84e:	05 96       	adiw	r24, 0x05	; 5
     850:	b8 01       	movw	r22, r16
     852:	37 d1       	rcall	.+622    	; 0xac2 <__unpack_f>
     854:	89 85       	ldd	r24, Y+9	; 0x09
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	38 f0       	brcs	.+14     	; 0x868 <__ltsf2+0x50>
     85a:	89 89       	ldd	r24, Y+17	; 0x11
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	20 f0       	brcs	.+8      	; 0x868 <__ltsf2+0x50>
     860:	c7 01       	movw	r24, r14
     862:	b8 01       	movw	r22, r16
     864:	a6 d1       	rcall	.+844    	; 0xbb2 <__fpcmp_parts_f>
     866:	01 c0       	rjmp	.+2      	; 0x86a <__ltsf2+0x52>
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	68 96       	adiw	r28, 0x18	; 24
     86c:	e6 e0       	ldi	r30, 0x06	; 6
     86e:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__epilogue_restores__+0x18>

00000872 <__fixsfsi>:
     872:	ac e0       	ldi	r26, 0x0C	; 12
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	ef e3       	ldi	r30, 0x3F	; 63
     878:	f4 e0       	ldi	r31, 0x04	; 4
     87a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x20>
     87e:	69 83       	std	Y+1, r22	; 0x01
     880:	7a 83       	std	Y+2, r23	; 0x02
     882:	8b 83       	std	Y+3, r24	; 0x03
     884:	9c 83       	std	Y+4, r25	; 0x04
     886:	ce 01       	movw	r24, r28
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	be 01       	movw	r22, r28
     88c:	6b 5f       	subi	r22, 0xFB	; 251
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	18 d1       	rcall	.+560    	; 0xac2 <__unpack_f>
     892:	8d 81       	ldd	r24, Y+5	; 0x05
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	61 f1       	breq	.+88     	; 0x8f0 <__fixsfsi+0x7e>
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	50 f1       	brcs	.+84     	; 0x8f0 <__fixsfsi+0x7e>
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	21 f4       	brne	.+8      	; 0x8a8 <__fixsfsi+0x36>
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	88 23       	and	r24, r24
     8a4:	51 f1       	breq	.+84     	; 0x8fa <__fixsfsi+0x88>
     8a6:	2e c0       	rjmp	.+92     	; 0x904 <__fixsfsi+0x92>
     8a8:	2f 81       	ldd	r18, Y+7	; 0x07
     8aa:	38 85       	ldd	r19, Y+8	; 0x08
     8ac:	37 fd       	sbrc	r19, 7
     8ae:	20 c0       	rjmp	.+64     	; 0x8f0 <__fixsfsi+0x7e>
     8b0:	6e 81       	ldd	r22, Y+6	; 0x06
     8b2:	2f 31       	cpi	r18, 0x1F	; 31
     8b4:	31 05       	cpc	r19, r1
     8b6:	1c f0       	brlt	.+6      	; 0x8be <__fixsfsi+0x4c>
     8b8:	66 23       	and	r22, r22
     8ba:	f9 f0       	breq	.+62     	; 0x8fa <__fixsfsi+0x88>
     8bc:	23 c0       	rjmp	.+70     	; 0x904 <__fixsfsi+0x92>
     8be:	8e e1       	ldi	r24, 0x1E	; 30
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	82 1b       	sub	r24, r18
     8c4:	93 0b       	sbc	r25, r19
     8c6:	29 85       	ldd	r18, Y+9	; 0x09
     8c8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8ca:	4b 85       	ldd	r20, Y+11	; 0x0b
     8cc:	5c 85       	ldd	r21, Y+12	; 0x0c
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__fixsfsi+0x66>
     8d0:	56 95       	lsr	r21
     8d2:	47 95       	ror	r20
     8d4:	37 95       	ror	r19
     8d6:	27 95       	ror	r18
     8d8:	8a 95       	dec	r24
     8da:	d2 f7       	brpl	.-12     	; 0x8d0 <__fixsfsi+0x5e>
     8dc:	66 23       	and	r22, r22
     8de:	b1 f0       	breq	.+44     	; 0x90c <__fixsfsi+0x9a>
     8e0:	50 95       	com	r21
     8e2:	40 95       	com	r20
     8e4:	30 95       	com	r19
     8e6:	21 95       	neg	r18
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	4f 4f       	sbci	r20, 0xFF	; 255
     8ec:	5f 4f       	sbci	r21, 0xFF	; 255
     8ee:	0e c0       	rjmp	.+28     	; 0x90c <__fixsfsi+0x9a>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__fixsfsi+0x9a>
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	3f ef       	ldi	r19, 0xFF	; 255
     8fe:	4f ef       	ldi	r20, 0xFF	; 255
     900:	5f e7       	ldi	r21, 0x7F	; 127
     902:	04 c0       	rjmp	.+8      	; 0x90c <__fixsfsi+0x9a>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e8       	ldi	r21, 0x80	; 128
     90c:	b9 01       	movw	r22, r18
     90e:	ca 01       	movw	r24, r20
     910:	2c 96       	adiw	r28, 0x0c	; 12
     912:	e2 e0       	ldi	r30, 0x02	; 2
     914:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x20>

00000918 <__pack_f>:
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	fc 01       	movw	r30, r24
     924:	e4 80       	ldd	r14, Z+4	; 0x04
     926:	f5 80       	ldd	r15, Z+5	; 0x05
     928:	06 81       	ldd	r16, Z+6	; 0x06
     92a:	17 81       	ldd	r17, Z+7	; 0x07
     92c:	d1 80       	ldd	r13, Z+1	; 0x01
     92e:	80 81       	ld	r24, Z
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	48 f4       	brcc	.+18     	; 0x946 <__pack_f+0x2e>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e1       	ldi	r26, 0x10	; 16
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	e8 2a       	or	r14, r24
     93e:	f9 2a       	or	r15, r25
     940:	0a 2b       	or	r16, r26
     942:	1b 2b       	or	r17, r27
     944:	a5 c0       	rjmp	.+330    	; 0xa90 <__pack_f+0x178>
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	09 f4       	brne	.+2      	; 0x94c <__pack_f+0x34>
     94a:	9f c0       	rjmp	.+318    	; 0xa8a <__pack_f+0x172>
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	21 f4       	brne	.+8      	; 0x958 <__pack_f+0x40>
     950:	ee 24       	eor	r14, r14
     952:	ff 24       	eor	r15, r15
     954:	87 01       	movw	r16, r14
     956:	05 c0       	rjmp	.+10     	; 0x962 <__pack_f+0x4a>
     958:	e1 14       	cp	r14, r1
     95a:	f1 04       	cpc	r15, r1
     95c:	01 05       	cpc	r16, r1
     95e:	11 05       	cpc	r17, r1
     960:	19 f4       	brne	.+6      	; 0x968 <__pack_f+0x50>
     962:	e0 e0       	ldi	r30, 0x00	; 0
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	96 c0       	rjmp	.+300    	; 0xa94 <__pack_f+0x17c>
     968:	62 81       	ldd	r22, Z+2	; 0x02
     96a:	73 81       	ldd	r23, Z+3	; 0x03
     96c:	9f ef       	ldi	r25, 0xFF	; 255
     96e:	62 38       	cpi	r22, 0x82	; 130
     970:	79 07       	cpc	r23, r25
     972:	0c f0       	brlt	.+2      	; 0x976 <__pack_f+0x5e>
     974:	5b c0       	rjmp	.+182    	; 0xa2c <__pack_f+0x114>
     976:	22 e8       	ldi	r18, 0x82	; 130
     978:	3f ef       	ldi	r19, 0xFF	; 255
     97a:	26 1b       	sub	r18, r22
     97c:	37 0b       	sbc	r19, r23
     97e:	2a 31       	cpi	r18, 0x1A	; 26
     980:	31 05       	cpc	r19, r1
     982:	2c f0       	brlt	.+10     	; 0x98e <__pack_f+0x76>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	2a c0       	rjmp	.+84     	; 0x9e2 <__pack_f+0xca>
     98e:	b8 01       	movw	r22, r16
     990:	a7 01       	movw	r20, r14
     992:	02 2e       	mov	r0, r18
     994:	04 c0       	rjmp	.+8      	; 0x99e <__pack_f+0x86>
     996:	76 95       	lsr	r23
     998:	67 95       	ror	r22
     99a:	57 95       	ror	r21
     99c:	47 95       	ror	r20
     99e:	0a 94       	dec	r0
     9a0:	d2 f7       	brpl	.-12     	; 0x996 <__pack_f+0x7e>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <__pack_f+0x9c>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	aa 1f       	adc	r26, r26
     9b2:	bb 1f       	adc	r27, r27
     9b4:	2a 95       	dec	r18
     9b6:	d2 f7       	brpl	.-12     	; 0x9ac <__pack_f+0x94>
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	a1 09       	sbc	r26, r1
     9bc:	b1 09       	sbc	r27, r1
     9be:	8e 21       	and	r24, r14
     9c0:	9f 21       	and	r25, r15
     9c2:	a0 23       	and	r26, r16
     9c4:	b1 23       	and	r27, r17
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	a1 05       	cpc	r26, r1
     9ca:	b1 05       	cpc	r27, r1
     9cc:	21 f0       	breq	.+8      	; 0x9d6 <__pack_f+0xbe>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	9a 01       	movw	r18, r20
     9d8:	ab 01       	movw	r20, r22
     9da:	28 2b       	or	r18, r24
     9dc:	39 2b       	or	r19, r25
     9de:	4a 2b       	or	r20, r26
     9e0:	5b 2b       	or	r21, r27
     9e2:	da 01       	movw	r26, r20
     9e4:	c9 01       	movw	r24, r18
     9e6:	8f 77       	andi	r24, 0x7F	; 127
     9e8:	90 70       	andi	r25, 0x00	; 0
     9ea:	a0 70       	andi	r26, 0x00	; 0
     9ec:	b0 70       	andi	r27, 0x00	; 0
     9ee:	80 34       	cpi	r24, 0x40	; 64
     9f0:	91 05       	cpc	r25, r1
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	39 f4       	brne	.+14     	; 0xa06 <__pack_f+0xee>
     9f8:	27 ff       	sbrs	r18, 7
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <__pack_f+0xf6>
     9fc:	20 5c       	subi	r18, 0xC0	; 192
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	4f 4f       	sbci	r20, 0xFF	; 255
     a02:	5f 4f       	sbci	r21, 0xFF	; 255
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__pack_f+0xf6>
     a06:	21 5c       	subi	r18, 0xC1	; 193
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	4f 4f       	sbci	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	e0 e0       	ldi	r30, 0x00	; 0
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	20 30       	cpi	r18, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	3a 07       	cpc	r19, r26
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	4a 07       	cpc	r20, r26
     a1c:	a0 e4       	ldi	r26, 0x40	; 64
     a1e:	5a 07       	cpc	r21, r26
     a20:	10 f0       	brcs	.+4      	; 0xa26 <__pack_f+0x10e>
     a22:	e1 e0       	ldi	r30, 0x01	; 1
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	79 01       	movw	r14, r18
     a28:	8a 01       	movw	r16, r20
     a2a:	27 c0       	rjmp	.+78     	; 0xa7a <__pack_f+0x162>
     a2c:	60 38       	cpi	r22, 0x80	; 128
     a2e:	71 05       	cpc	r23, r1
     a30:	64 f5       	brge	.+88     	; 0xa8a <__pack_f+0x172>
     a32:	fb 01       	movw	r30, r22
     a34:	e1 58       	subi	r30, 0x81	; 129
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	d8 01       	movw	r26, r16
     a3a:	c7 01       	movw	r24, r14
     a3c:	8f 77       	andi	r24, 0x7F	; 127
     a3e:	90 70       	andi	r25, 0x00	; 0
     a40:	a0 70       	andi	r26, 0x00	; 0
     a42:	b0 70       	andi	r27, 0x00	; 0
     a44:	80 34       	cpi	r24, 0x40	; 64
     a46:	91 05       	cpc	r25, r1
     a48:	a1 05       	cpc	r26, r1
     a4a:	b1 05       	cpc	r27, r1
     a4c:	39 f4       	brne	.+14     	; 0xa5c <__pack_f+0x144>
     a4e:	e7 fe       	sbrs	r14, 7
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <__pack_f+0x154>
     a52:	80 e4       	ldi	r24, 0x40	; 64
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__pack_f+0x14c>
     a5c:	8f e3       	ldi	r24, 0x3F	; 63
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a0 e0       	ldi	r26, 0x00	; 0
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e8 0e       	add	r14, r24
     a66:	f9 1e       	adc	r15, r25
     a68:	0a 1f       	adc	r16, r26
     a6a:	1b 1f       	adc	r17, r27
     a6c:	17 ff       	sbrs	r17, 7
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <__pack_f+0x162>
     a70:	16 95       	lsr	r17
     a72:	07 95       	ror	r16
     a74:	f7 94       	ror	r15
     a76:	e7 94       	ror	r14
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	16 95       	lsr	r17
     a7e:	07 95       	ror	r16
     a80:	f7 94       	ror	r15
     a82:	e7 94       	ror	r14
     a84:	8a 95       	dec	r24
     a86:	d1 f7       	brne	.-12     	; 0xa7c <__pack_f+0x164>
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__pack_f+0x17c>
     a8a:	ee 24       	eor	r14, r14
     a8c:	ff 24       	eor	r15, r15
     a8e:	87 01       	movw	r16, r14
     a90:	ef ef       	ldi	r30, 0xFF	; 255
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	6e 2f       	mov	r22, r30
     a96:	67 95       	ror	r22
     a98:	66 27       	eor	r22, r22
     a9a:	67 95       	ror	r22
     a9c:	90 2f       	mov	r25, r16
     a9e:	9f 77       	andi	r25, 0x7F	; 127
     aa0:	d7 94       	ror	r13
     aa2:	dd 24       	eor	r13, r13
     aa4:	d7 94       	ror	r13
     aa6:	8e 2f       	mov	r24, r30
     aa8:	86 95       	lsr	r24
     aaa:	49 2f       	mov	r20, r25
     aac:	46 2b       	or	r20, r22
     aae:	58 2f       	mov	r21, r24
     ab0:	5d 29       	or	r21, r13
     ab2:	b7 01       	movw	r22, r14
     ab4:	ca 01       	movw	r24, r20
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	08 95       	ret

00000ac2 <__unpack_f>:
     ac2:	fc 01       	movw	r30, r24
     ac4:	db 01       	movw	r26, r22
     ac6:	40 81       	ld	r20, Z
     ac8:	51 81       	ldd	r21, Z+1	; 0x01
     aca:	22 81       	ldd	r18, Z+2	; 0x02
     acc:	62 2f       	mov	r22, r18
     ace:	6f 77       	andi	r22, 0x7F	; 127
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	22 1f       	adc	r18, r18
     ad4:	22 27       	eor	r18, r18
     ad6:	22 1f       	adc	r18, r18
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	89 2f       	mov	r24, r25
     adc:	88 0f       	add	r24, r24
     ade:	82 2b       	or	r24, r18
     ae0:	28 2f       	mov	r18, r24
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	99 1f       	adc	r25, r25
     ae6:	99 27       	eor	r25, r25
     ae8:	99 1f       	adc	r25, r25
     aea:	11 96       	adiw	r26, 0x01	; 1
     aec:	9c 93       	st	X, r25
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	21 15       	cp	r18, r1
     af2:	31 05       	cpc	r19, r1
     af4:	a9 f5       	brne	.+106    	; 0xb60 <__unpack_f+0x9e>
     af6:	41 15       	cp	r20, r1
     af8:	51 05       	cpc	r21, r1
     afa:	61 05       	cpc	r22, r1
     afc:	71 05       	cpc	r23, r1
     afe:	11 f4       	brne	.+4      	; 0xb04 <__unpack_f+0x42>
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	37 c0       	rjmp	.+110    	; 0xb72 <__unpack_f+0xb0>
     b04:	82 e8       	ldi	r24, 0x82	; 130
     b06:	9f ef       	ldi	r25, 0xFF	; 255
     b08:	13 96       	adiw	r26, 0x03	; 3
     b0a:	9c 93       	st	X, r25
     b0c:	8e 93       	st	-X, r24
     b0e:	12 97       	sbiw	r26, 0x02	; 2
     b10:	9a 01       	movw	r18, r20
     b12:	ab 01       	movw	r20, r22
     b14:	67 e0       	ldi	r22, 0x07	; 7
     b16:	22 0f       	add	r18, r18
     b18:	33 1f       	adc	r19, r19
     b1a:	44 1f       	adc	r20, r20
     b1c:	55 1f       	adc	r21, r21
     b1e:	6a 95       	dec	r22
     b20:	d1 f7       	brne	.-12     	; 0xb16 <__unpack_f+0x54>
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	8c 93       	st	X, r24
     b26:	0d c0       	rjmp	.+26     	; 0xb42 <__unpack_f+0x80>
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	44 1f       	adc	r20, r20
     b2e:	55 1f       	adc	r21, r21
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	8d 91       	ld	r24, X+
     b34:	9c 91       	ld	r25, X
     b36:	13 97       	sbiw	r26, 0x03	; 3
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	9c 93       	st	X, r25
     b3e:	8e 93       	st	-X, r24
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	20 30       	cpi	r18, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	38 07       	cpc	r19, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	48 07       	cpc	r20, r24
     b4c:	80 e4       	ldi	r24, 0x40	; 64
     b4e:	58 07       	cpc	r21, r24
     b50:	58 f3       	brcs	.-42     	; 0xb28 <__unpack_f+0x66>
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	2d 93       	st	X+, r18
     b56:	3d 93       	st	X+, r19
     b58:	4d 93       	st	X+, r20
     b5a:	5c 93       	st	X, r21
     b5c:	17 97       	sbiw	r26, 0x07	; 7
     b5e:	08 95       	ret
     b60:	2f 3f       	cpi	r18, 0xFF	; 255
     b62:	31 05       	cpc	r19, r1
     b64:	79 f4       	brne	.+30     	; 0xb84 <__unpack_f+0xc2>
     b66:	41 15       	cp	r20, r1
     b68:	51 05       	cpc	r21, r1
     b6a:	61 05       	cpc	r22, r1
     b6c:	71 05       	cpc	r23, r1
     b6e:	19 f4       	brne	.+6      	; 0xb76 <__unpack_f+0xb4>
     b70:	84 e0       	ldi	r24, 0x04	; 4
     b72:	8c 93       	st	X, r24
     b74:	08 95       	ret
     b76:	64 ff       	sbrs	r22, 4
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <__unpack_f+0xbe>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	8c 93       	st	X, r24
     b7e:	12 c0       	rjmp	.+36     	; 0xba4 <__unpack_f+0xe2>
     b80:	1c 92       	st	X, r1
     b82:	10 c0       	rjmp	.+32     	; 0xba4 <__unpack_f+0xe2>
     b84:	2f 57       	subi	r18, 0x7F	; 127
     b86:	30 40       	sbci	r19, 0x00	; 0
     b88:	13 96       	adiw	r26, 0x03	; 3
     b8a:	3c 93       	st	X, r19
     b8c:	2e 93       	st	-X, r18
     b8e:	12 97       	sbiw	r26, 0x02	; 2
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	8c 93       	st	X, r24
     b94:	87 e0       	ldi	r24, 0x07	; 7
     b96:	44 0f       	add	r20, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	66 1f       	adc	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	8a 95       	dec	r24
     ba0:	d1 f7       	brne	.-12     	; 0xb96 <__unpack_f+0xd4>
     ba2:	70 64       	ori	r23, 0x40	; 64
     ba4:	14 96       	adiw	r26, 0x04	; 4
     ba6:	4d 93       	st	X+, r20
     ba8:	5d 93       	st	X+, r21
     baa:	6d 93       	st	X+, r22
     bac:	7c 93       	st	X, r23
     bae:	17 97       	sbiw	r26, 0x07	; 7
     bb0:	08 95       	ret

00000bb2 <__fpcmp_parts_f>:
     bb2:	1f 93       	push	r17
     bb4:	dc 01       	movw	r26, r24
     bb6:	fb 01       	movw	r30, r22
     bb8:	9c 91       	ld	r25, X
     bba:	92 30       	cpi	r25, 0x02	; 2
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <__fpcmp_parts_f+0xe>
     bbe:	47 c0       	rjmp	.+142    	; 0xc4e <__fpcmp_parts_f+0x9c>
     bc0:	80 81       	ld	r24, Z
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	08 f4       	brcc	.+2      	; 0xbc8 <__fpcmp_parts_f+0x16>
     bc6:	43 c0       	rjmp	.+134    	; 0xc4e <__fpcmp_parts_f+0x9c>
     bc8:	94 30       	cpi	r25, 0x04	; 4
     bca:	51 f4       	brne	.+20     	; 0xbe0 <__fpcmp_parts_f+0x2e>
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	1c 91       	ld	r17, X
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	99 f5       	brne	.+102    	; 0xc3a <__fpcmp_parts_f+0x88>
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
     bd6:	68 2f       	mov	r22, r24
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	61 1b       	sub	r22, r17
     bdc:	71 09       	sbc	r23, r1
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <__fpcmp_parts_f+0xac>
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	21 f0       	breq	.+8      	; 0xbec <__fpcmp_parts_f+0x3a>
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	31 f4       	brne	.+12     	; 0xbf4 <__fpcmp_parts_f+0x42>
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	b9 f1       	breq	.+110    	; 0xc5a <__fpcmp_parts_f+0xa8>
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	88 23       	and	r24, r24
     bf0:	89 f1       	breq	.+98     	; 0xc54 <__fpcmp_parts_f+0xa2>
     bf2:	2d c0       	rjmp	.+90     	; 0xc4e <__fpcmp_parts_f+0x9c>
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	1c 91       	ld	r17, X
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	f1 f0       	breq	.+60     	; 0xc3a <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	18 17       	cp	r17, r24
     c02:	d9 f4       	brne	.+54     	; 0xc3a <__fpcmp_parts_f+0x88>
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	2d 91       	ld	r18, X+
     c08:	3c 91       	ld	r19, X
     c0a:	13 97       	sbiw	r26, 0x03	; 3
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	82 17       	cp	r24, r18
     c12:	93 07       	cpc	r25, r19
     c14:	94 f0       	brlt	.+36     	; 0xc3a <__fpcmp_parts_f+0x88>
     c16:	28 17       	cp	r18, r24
     c18:	39 07       	cpc	r19, r25
     c1a:	bc f0       	brlt	.+46     	; 0xc4a <__fpcmp_parts_f+0x98>
     c1c:	14 96       	adiw	r26, 0x04	; 4
     c1e:	8d 91       	ld	r24, X+
     c20:	9d 91       	ld	r25, X+
     c22:	0d 90       	ld	r0, X+
     c24:	bc 91       	ld	r27, X
     c26:	a0 2d       	mov	r26, r0
     c28:	24 81       	ldd	r18, Z+4	; 0x04
     c2a:	35 81       	ldd	r19, Z+5	; 0x05
     c2c:	46 81       	ldd	r20, Z+6	; 0x06
     c2e:	57 81       	ldd	r21, Z+7	; 0x07
     c30:	28 17       	cp	r18, r24
     c32:	39 07       	cpc	r19, r25
     c34:	4a 07       	cpc	r20, r26
     c36:	5b 07       	cpc	r21, r27
     c38:	18 f4       	brcc	.+6      	; 0xc40 <__fpcmp_parts_f+0x8e>
     c3a:	11 23       	and	r17, r17
     c3c:	41 f0       	breq	.+16     	; 0xc4e <__fpcmp_parts_f+0x9c>
     c3e:	0a c0       	rjmp	.+20     	; 0xc54 <__fpcmp_parts_f+0xa2>
     c40:	82 17       	cp	r24, r18
     c42:	93 07       	cpc	r25, r19
     c44:	a4 07       	cpc	r26, r20
     c46:	b5 07       	cpc	r27, r21
     c48:	40 f4       	brcc	.+16     	; 0xc5a <__fpcmp_parts_f+0xa8>
     c4a:	11 23       	and	r17, r17
     c4c:	19 f0       	breq	.+6      	; 0xc54 <__fpcmp_parts_f+0xa2>
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__fpcmp_parts_f+0xac>
     c54:	6f ef       	ldi	r22, 0xFF	; 255
     c56:	7f ef       	ldi	r23, 0xFF	; 255
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <__fpcmp_parts_f+0xac>
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	cb 01       	movw	r24, r22
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <GPIO_setupPinDirection+0x6>
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <GPIO_setupPinDirection+0x8>
     c6c:	0f 92       	push	r0
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	6a 83       	std	Y+2, r22	; 0x02
     c76:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <GPIO_setupPinDirection+0x1c>
     c7e:	d5 c0       	rjmp	.+426    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	08 f0       	brcs	.+2      	; 0xc88 <GPIO_setupPinDirection+0x24>
     c86:	d1 c0       	rjmp	.+418    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	3d 83       	std	Y+5, r19	; 0x05
     c90:	2c 83       	std	Y+4, r18	; 0x04
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	91 05       	cpc	r25, r1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <GPIO_setupPinDirection+0x3a>
     c9c:	43 c0       	rjmp	.+134    	; 0xd24 <GPIO_setupPinDirection+0xc0>
     c9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ca0:	3d 81       	ldd	r19, Y+5	; 0x05
     ca2:	22 30       	cpi	r18, 0x02	; 2
     ca4:	31 05       	cpc	r19, r1
     ca6:	2c f4       	brge	.+10     	; 0xcb2 <GPIO_setupPinDirection+0x4e>
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	71 f0       	breq	.+28     	; 0xccc <GPIO_setupPinDirection+0x68>
     cb0:	bc c0       	rjmp	.+376    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
     cb2:	2c 81       	ldd	r18, Y+4	; 0x04
     cb4:	3d 81       	ldd	r19, Y+5	; 0x05
     cb6:	22 30       	cpi	r18, 0x02	; 2
     cb8:	31 05       	cpc	r19, r1
     cba:	09 f4       	brne	.+2      	; 0xcbe <GPIO_setupPinDirection+0x5a>
     cbc:	5f c0       	rjmp	.+190    	; 0xd7c <GPIO_setupPinDirection+0x118>
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	9d 81       	ldd	r25, Y+5	; 0x05
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <GPIO_setupPinDirection+0x66>
     cc8:	85 c0       	rjmp	.+266    	; 0xdd4 <GPIO_setupPinDirection+0x170>
     cca:	af c0       	rjmp	.+350    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	a1 f4       	brne	.+40     	; 0xcfa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cd2:	aa e3       	ldi	r26, 0x3A	; 58
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ea e3       	ldi	r30, 0x3A	; 58
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	02 2e       	mov	r0, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <GPIO_setupPinDirection+0x8c>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <GPIO_setupPinDirection+0x88>
     cf4:	84 2b       	or	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	98 c0       	rjmp	.+304    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     cfa:	aa e3       	ldi	r26, 0x3A	; 58
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <GPIO_setupPinDirection+0xb4>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <GPIO_setupPinDirection+0xb0>
     d1c:	80 95       	com	r24
     d1e:	84 23       	and	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	83 c0       	rjmp	.+262    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	a1 f4       	brne	.+40     	; 0xd52 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d2a:	a7 e3       	ldi	r26, 0x37	; 55
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e3       	ldi	r30, 0x37	; 55
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <GPIO_setupPinDirection+0xe4>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <GPIO_setupPinDirection+0xe0>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	6c c0       	rjmp	.+216    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d52:	a7 e3       	ldi	r26, 0x37	; 55
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e3       	ldi	r30, 0x37	; 55
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <GPIO_setupPinDirection+0x10c>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <GPIO_setupPinDirection+0x108>
     d74:	80 95       	com	r24
     d76:	84 23       	and	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	57 c0       	rjmp	.+174    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	a1 f4       	brne	.+40     	; 0xdaa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d82:	a4 e3       	ldi	r26, 0x34	; 52
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e4 e3       	ldi	r30, 0x34	; 52
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <GPIO_setupPinDirection+0x13c>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <GPIO_setupPinDirection+0x138>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	40 c0       	rjmp	.+128    	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     daa:	a4 e3       	ldi	r26, 0x34	; 52
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e4 e3       	ldi	r30, 0x34	; 52
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <GPIO_setupPinDirection+0x164>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <GPIO_setupPinDirection+0x160>
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	2b c0       	rjmp	.+86     	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	a1 f4       	brne	.+40     	; 0xe02 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dda:	a1 e3       	ldi	r26, 0x31	; 49
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e1 e3       	ldi	r30, 0x31	; 49
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <GPIO_setupPinDirection+0x194>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <GPIO_setupPinDirection+0x190>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	14 c0       	rjmp	.+40     	; 0xe2a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e02:	a1 e3       	ldi	r26, 0x31	; 49
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e1 e3       	ldi	r30, 0x31	; 49
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <GPIO_setupPinDirection+0x1bc>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <GPIO_setupPinDirection+0x1b8>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <GPIO_writePin+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <GPIO_writePin+0x8>
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	6a 83       	std	Y+2, r22	; 0x02
     e4c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	08 f0       	brcs	.+2      	; 0xe56 <GPIO_writePin+0x1c>
     e54:	d5 c0       	rjmp	.+426    	; 0x1000 <GPIO_writePin+0x1c6>
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	84 30       	cpi	r24, 0x04	; 4
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <GPIO_writePin+0x24>
     e5c:	d1 c0       	rjmp	.+418    	; 0x1000 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3d 83       	std	Y+5, r19	; 0x05
     e66:	2c 83       	std	Y+4, r18	; 0x04
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <GPIO_writePin+0x3a>
     e72:	43 c0       	rjmp	.+134    	; 0xefa <GPIO_writePin+0xc0>
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <GPIO_writePin+0x4e>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	71 f0       	breq	.+28     	; 0xea2 <GPIO_writePin+0x68>
     e86:	bc c0       	rjmp	.+376    	; 0x1000 <GPIO_writePin+0x1c6>
     e88:	2c 81       	ldd	r18, Y+4	; 0x04
     e8a:	3d 81       	ldd	r19, Y+5	; 0x05
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <GPIO_writePin+0x5a>
     e92:	5f c0       	rjmp	.+190    	; 0xf52 <GPIO_writePin+0x118>
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <GPIO_writePin+0x66>
     e9e:	85 c0       	rjmp	.+266    	; 0xfaa <GPIO_writePin+0x170>
     ea0:	af c0       	rjmp	.+350    	; 0x1000 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ea8:	ab e3       	ldi	r26, 0x3B	; 59
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e3       	ldi	r30, 0x3B	; 59
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_writePin+0x8c>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_writePin+0x88>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	98 c0       	rjmp	.+304    	; 0x1000 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ed0:	ab e3       	ldi	r26, 0x3B	; 59
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e3       	ldi	r30, 0x3B	; 59
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_writePin+0xb4>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_writePin+0xb0>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	83 c0       	rjmp	.+262    	; 0x1000 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	a1 f4       	brne	.+40     	; 0xf28 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <GPIO_writePin+0xe4>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <GPIO_writePin+0xe0>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	6c c0       	rjmp	.+216    	; 0x1000 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f28:	a8 e3       	ldi	r26, 0x38	; 56
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e8 e3       	ldi	r30, 0x38	; 56
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_writePin+0x10c>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_writePin+0x108>
     f4a:	80 95       	com	r24
     f4c:	84 23       	and	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	57 c0       	rjmp	.+174    	; 0x1000 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	a1 f4       	brne	.+40     	; 0xf80 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f58:	a5 e3       	ldi	r26, 0x35	; 53
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e5 e3       	ldi	r30, 0x35	; 53
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <GPIO_writePin+0x13c>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <GPIO_writePin+0x138>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	40 c0       	rjmp	.+128    	; 0x1000 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f80:	a5 e3       	ldi	r26, 0x35	; 53
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e3       	ldi	r30, 0x35	; 53
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_writePin+0x164>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_writePin+0x160>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	2b c0       	rjmp	.+86     	; 0x1000 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fb0:	a2 e3       	ldi	r26, 0x32	; 50
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e2 e3       	ldi	r30, 0x32	; 50
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_writePin+0x194>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_writePin+0x190>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     fd8:	a2 e3       	ldi	r26, 0x32	; 50
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 e3       	ldi	r30, 0x32	; 50
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_writePin+0x1bc>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_writePin+0x1b8>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <GPIO_setupPortDirection+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_setupPortDirection+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	90 f5       	brcc	.+100    	; 0x108a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3c 83       	std	Y+4, r19	; 0x04
    102e:	2b 83       	std	Y+3, r18	; 0x03
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	d1 f0       	breq	.+52     	; 0x106e <GPIO_setupPortDirection+0x5e>
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	3c 81       	ldd	r19, Y+4	; 0x04
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <GPIO_setupPortDirection+0x3e>
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	61 f0       	breq	.+24     	; 0x1064 <GPIO_setupPortDirection+0x54>
    104c:	1e c0       	rjmp	.+60     	; 0x108a <GPIO_setupPortDirection+0x7a>
    104e:	2b 81       	ldd	r18, Y+3	; 0x03
    1050:	3c 81       	ldd	r19, Y+4	; 0x04
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	81 f0       	breq	.+32     	; 0x1078 <GPIO_setupPortDirection+0x68>
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	81 f0       	breq	.+32     	; 0x1082 <GPIO_setupPortDirection+0x72>
    1062:	13 c0       	rjmp	.+38     	; 0x108a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1064:	ea e3       	ldi	r30, 0x3A	; 58
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	80 83       	st	Z, r24
    106c:	0e c0       	rjmp	.+28     	; 0x108a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    106e:	e7 e3       	ldi	r30, 0x37	; 55
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	80 83       	st	Z, r24
    1076:	09 c0       	rjmp	.+18     	; 0x108a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1078:	e4 e3       	ldi	r30, 0x34	; 52
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 83       	st	Z, r24
    1080:	04 c0       	rjmp	.+8      	; 0x108a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1082:	e1 e3       	ldi	r30, 0x31	; 49
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	80 83       	st	Z, r24
			break;
		}
	}
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <GPIO_writePort+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <GPIO_writePort+0x8>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	90 f5       	brcc	.+100    	; 0x1112 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3c 83       	std	Y+4, r19	; 0x04
    10b6:	2b 83       	std	Y+3, r18	; 0x03
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	d1 f0       	breq	.+52     	; 0x10f6 <GPIO_writePort+0x5e>
    10c2:	2b 81       	ldd	r18, Y+3	; 0x03
    10c4:	3c 81       	ldd	r19, Y+4	; 0x04
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <GPIO_writePort+0x3e>
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	9c 81       	ldd	r25, Y+4	; 0x04
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	61 f0       	breq	.+24     	; 0x10ec <GPIO_writePort+0x54>
    10d4:	1e c0       	rjmp	.+60     	; 0x1112 <GPIO_writePort+0x7a>
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	3c 81       	ldd	r19, Y+4	; 0x04
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	81 f0       	breq	.+32     	; 0x1100 <GPIO_writePort+0x68>
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	91 05       	cpc	r25, r1
    10e8:	81 f0       	breq	.+32     	; 0x110a <GPIO_writePort+0x72>
    10ea:	13 c0       	rjmp	.+38     	; 0x1112 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10ec:	eb e3       	ldi	r30, 0x3B	; 59
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	80 83       	st	Z, r24
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10f6:	e8 e3       	ldi	r30, 0x38	; 56
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	80 83       	st	Z, r24
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1100:	e5 e3       	ldi	r30, 0x35	; 53
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	80 83       	st	Z, r24
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 83       	st	Z, r24
			break;
		}
	}
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <__vector_5>:
 *                       Interrupt Service Routines                            *
 *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    114a:	80 91 7e 00 	lds	r24, 0x007E
    114e:	90 91 7f 00 	lds	r25, 0x007F
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	29 f0       	breq	.+10     	; 0x1160 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1156:	e0 91 7e 00 	lds	r30, 0x007E
    115a:	f0 91 7f 00 	lds	r31, 0x007F
    115e:	09 95       	icall
	}
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <Icu_init+0x6>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);	/* Enable Global Interrupt I-Bit */
    1194:	af e5       	ldi	r26, 0x5F	; 95
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e5       	ldi	r30, 0x5F	; 95
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 68       	ori	r24, 0x80	; 128
    11a0:	8c 93       	st	X, r24

	/* Configure ICP1/PD6 as i/p pin */
	GPIO_setupPinDirection(PORTD_ID, PIN6_ID, PIN_INPUT );
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	66 e0       	ldi	r22, 0x06	; 6
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	5d dd       	rcall	.-1350   	; 0xc64 <GPIO_setupPinDirection>
    11aa:	ef e4       	ldi	r30, 0x4F	; 79

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8c e0       	ldi	r24, 0x0C	; 12
    11b0:	80 83       	st	Z, r24
    11b2:	ae e4       	ldi	r26, 0x4E	; 78

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ee e4       	ldi	r30, 0x4E	; 78
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	98 2f       	mov	r25, r24
    11be:	98 7f       	andi	r25, 0xF8	; 248
    11c0:	e9 81       	ldd	r30, Y+1	; 0x01
    11c2:	fa 81       	ldd	r31, Y+2	; 0x02
    11c4:	80 81       	ld	r24, Z
    11c6:	89 2b       	or	r24, r25
    11c8:	8c 93       	st	X, r24
    11ca:	ae e4       	ldi	r26, 0x4E	; 78
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<ICES1);
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ee e4       	ldi	r30, 0x4E	; 78
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	28 2f       	mov	r18, r24
    11d6:	2f 7b       	andi	r18, 0xBF	; 191
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	00 24       	eor	r0, r0
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	07 94       	ror	r0
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	07 94       	ror	r0
    11f0:	98 2f       	mov	r25, r24
    11f2:	80 2d       	mov	r24, r0
    11f4:	82 2b       	or	r24, r18
    11f6:	8c 93       	st	X, r24
    11f8:	ec e4       	ldi	r30, 0x4C	; 76

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	11 82       	std	Z+1, r1	; 0x01
    11fe:	10 82       	st	Z, r1
    1200:	e6 e4       	ldi	r30, 0x46	; 70

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	11 82       	std	Z+1, r1	; 0x01
    1206:	10 82       	st	Z, r1
    1208:	a9 e5       	ldi	r26, 0x59	; 89

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e9 e5       	ldi	r30, 0x59	; 89
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 62       	ori	r24, 0x20	; 32
    1214:	8c 93       	st	X, r24
    1216:	0f 90       	pop	r0
}
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <Icu_setCallBack+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	90 93 7f 00 	sts	0x007F, r25
    1236:	80 93 7e 00 	sts	0x007E, r24
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1250:	ae e4       	ldi	r26, 0x4E	; 78
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	ee e4       	ldi	r30, 0x4E	; 78
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	28 2f       	mov	r18, r24
    125c:	2f 7b       	andi	r18, 0xBF	; 191
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	00 24       	eor	r0, r0
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	07 94       	ror	r0
    126c:	96 95       	lsr	r25
    126e:	87 95       	ror	r24
    1270:	07 94       	ror	r0
    1272:	98 2f       	mov	r25, r24
    1274:	80 2d       	mov	r24, r0
    1276:	82 2b       	or	r24, r18
    1278:	8c 93       	st	X, r24
}
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    128a:	e6 e4       	ldi	r30, 0x46	; 70
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    12a0:	ec e4       	ldi	r30, 0x4C	; 76
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	11 82       	std	Z+1, r1	; 0x01
    12a6:	10 82       	st	Z, r1
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    12b6:	ef e4       	ldi	r30, 0x4F	; 79
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	10 82       	st	Z, r1
	TCCR1B = 0;
    12bc:	ee e4       	ldi	r30, 0x4E	; 78
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
	TCNT1 = 0;
    12c2:	ec e4       	ldi	r30, 0x4C	; 76
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	11 82       	std	Z+1, r1	; 0x01
    12c8:	10 82       	st	Z, r1
	ICR1 = 0;
    12ca:	e6 e4       	ldi	r30, 0x46	; 70
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	11 82       	std	Z+1, r1	; 0x01
    12d0:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    12d2:	a9 e5       	ldi	r26, 0x59	; 89
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e9 e5       	ldi	r30, 0x59	; 89
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7d       	andi	r24, 0xDF	; 223
    12de:	8c 93       	st	X, r24
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	b7 dc       	rcall	.-1682   	; 0xc64 <GPIO_setupPinDirection>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	b3 dc       	rcall	.-1690   	; 0xc64 <GPIO_setupPinDirection>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	62 e0       	ldi	r22, 0x02	; 2
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	af dc       	rcall	.-1698   	; 0xc64 <GPIO_setupPinDirection>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	6f ef       	ldi	r22, 0xFF	; 255
    130a:	82 de       	rcall	.-764    	; 0x1010 <GPIO_setupPortDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    130c:	88 e3       	ldi	r24, 0x38	; 56
    130e:	07 d0       	rcall	.+14     	; 0x131e <LCD_sendCommand>
    1310:	8c e0       	ldi	r24, 0x0C	; 12
    1312:	05 d0       	rcall	.+10     	; 0x131e <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	03 d0       	rcall	.+6      	; 0x131e <LCD_sendCommand>
    1318:	cf 91       	pop	r28
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	e9 97       	sbiw	r28, 0x39	; 57
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	7f dd       	rcall	.-1282   	; 0xe3a <GPIO_writePin>
    133c:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	7b dd       	rcall	.-1290   	; 0xe3a <GPIO_writePin>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a0 e8       	ldi	r26, 0x80	; 128
    134a:	bf e3       	ldi	r27, 0x3F	; 63
    134c:	8d ab       	std	Y+53, r24	; 0x35
    134e:	9e ab       	std	Y+54, r25	; 0x36
    1350:	af ab       	std	Y+55, r26	; 0x37
    1352:	b8 af       	std	Y+56, r27	; 0x38
    1354:	6d a9       	ldd	r22, Y+53	; 0x35
    1356:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	8f a9       	ldd	r24, Y+55	; 0x37
    135a:	98 ad       	ldd	r25, Y+56	; 0x38
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4a e7       	ldi	r20, 0x7A	; 122
    1362:	53 e4       	ldi	r21, 0x43	; 67
    1364:	5f d8       	rcall	.-3906   	; 0x424 <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	89 ab       	std	Y+49, r24	; 0x31
    136c:	9a ab       	std	Y+50, r25	; 0x32
    136e:	ab ab       	std	Y+51, r26	; 0x33
    1370:	bc ab       	std	Y+52, r27	; 0x34
    1372:	69 a9       	ldd	r22, Y+49	; 0x31
    1374:	7a a9       	ldd	r23, Y+50	; 0x32
    1376:	8b a9       	ldd	r24, Y+51	; 0x33
	if (__tmp < 1.0)
    1378:	9c a9       	ldd	r25, Y+52	; 0x34
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	4a da       	rcall	.-2924   	; 0x818 <__ltsf2>
    1384:	88 23       	and	r24, r24
    1386:	2c f4       	brge	.+10     	; 0x1392 <LCD_sendCommand+0x74>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	98 ab       	std	Y+48, r25	; 0x30
    138e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
    1390:	3d c0       	rjmp	.+122    	; 0x140c <LCD_sendCommand+0xee>
    1392:	69 a9       	ldd	r22, Y+49	; 0x31
    1394:	7a a9       	ldd	r23, Y+50	; 0x32
    1396:	8b a9       	ldd	r24, Y+51	; 0x33
    1398:	9c a9       	ldd	r25, Y+52	; 0x34
	else if (__tmp > 65535)
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	57 e4       	ldi	r21, 0x47	; 71
    13a2:	e0 d9       	rcall	.-3136   	; 0x764 <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	44 f5       	brge	.+80     	; 0x13f8 <LCD_sendCommand+0xda>
    13a8:	6d a9       	ldd	r22, Y+53	; 0x35
    13aa:	7e a9       	ldd	r23, Y+54	; 0x36
    13ac:	8f a9       	ldd	r24, Y+55	; 0x37
    13ae:	98 ad       	ldd	r25, Y+56	; 0x38
    13b0:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	35 d8       	rcall	.-3990   	; 0x424 <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	98 ab       	std	Y+48, r25	; 0x30
    13cc:	8f a7       	std	Y+47, r24	; 0x2f
    13ce:	0f c0       	rjmp	.+30     	; 0x13ee <LCD_sendCommand+0xd0>
    13d0:	89 e1       	ldi	r24, 0x19	; 25
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9e a7       	std	Y+46, r25	; 0x2e
    13d6:	8d a7       	std	Y+45, r24	; 0x2d
    13d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13da:	9e a5       	ldd	r25, Y+46	; 0x2e
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LCD_sendCommand+0xbe>
    13e0:	9e a7       	std	Y+46, r25	; 0x2e
    13e2:	8d a7       	std	Y+45, r24	; 0x2d
    13e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e6:	98 a9       	ldd	r25, Y+48	; 0x30
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	98 ab       	std	Y+48, r25	; 0x30
    13ec:	8f a7       	std	Y+47, r24	; 0x2f
    13ee:	8f a5       	ldd	r24, Y+47	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	98 a9       	ldd	r25, Y+48	; 0x30
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <LCD_sendCommand+0xb2>
    13f6:	14 c0       	rjmp	.+40     	; 0x1420 <LCD_sendCommand+0x102>
    13f8:	69 a9       	ldd	r22, Y+49	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fa:	7a a9       	ldd	r23, Y+50	; 0x32
    13fc:	8b a9       	ldd	r24, Y+51	; 0x33
    13fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1400:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	98 ab       	std	Y+48, r25	; 0x30
    140a:	8f a7       	std	Y+47, r24	; 0x2f
    140c:	8f a5       	ldd	r24, Y+47	; 0x2f
    140e:	98 a9       	ldd	r25, Y+48	; 0x30
    1410:	9c a7       	std	Y+44, r25	; 0x2c
    1412:	8b a7       	std	Y+43, r24	; 0x2b
    1414:	8b a5       	ldd	r24, Y+43	; 0x2b
    1416:	9c a5       	ldd	r25, Y+44	; 0x2c
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_sendCommand+0xfa>
    141c:	9c a7       	std	Y+44, r25	; 0x2c
    141e:	8b a7       	std	Y+43, r24	; 0x2b
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	62 e0       	ldi	r22, 0x02	; 2
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	09 dd       	rcall	.-1518   	; 0xe3a <GPIO_writePin>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    142c:	a0 e8       	ldi	r26, 0x80	; 128
    142e:	bf e3       	ldi	r27, 0x3F	; 63
    1430:	8f a3       	std	Y+39, r24	; 0x27
    1432:	98 a7       	std	Y+40, r25	; 0x28
    1434:	a9 a7       	std	Y+41, r26	; 0x29
    1436:	ba a7       	std	Y+42, r27	; 0x2a
    1438:	6f a1       	ldd	r22, Y+39	; 0x27
    143a:	78 a5       	ldd	r23, Y+40	; 0x28
    143c:	89 a5       	ldd	r24, Y+41	; 0x29
    143e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	4a e7       	ldi	r20, 0x7A	; 122
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	53 e4       	ldi	r21, 0x43	; 67
    1448:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	8b a3       	std	Y+35, r24	; 0x23
    1452:	9c a3       	std	Y+36, r25	; 0x24
    1454:	ad a3       	std	Y+37, r26	; 0x25
    1456:	be a3       	std	Y+38, r27	; 0x26
    1458:	6b a1       	ldd	r22, Y+35	; 0x23
    145a:	7c a1       	ldd	r23, Y+36	; 0x24
    145c:	8d a1       	ldd	r24, Y+37	; 0x25
    145e:	9e a1       	ldd	r25, Y+38	; 0x26
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    1466:	5f e3       	ldi	r21, 0x3F	; 63
    1468:	d7 d9       	rcall	.-3154   	; 0x818 <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	2c f4       	brge	.+10     	; 0x1478 <LCD_sendCommand+0x15a>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9a a3       	std	Y+34, r25	; 0x22
    1474:	89 a3       	std	Y+33, r24	; 0x21
    1476:	3e c0       	rjmp	.+124    	; 0x14f4 <LCD_sendCommand+0x1d6>
    1478:	6b a1       	ldd	r22, Y+35	; 0x23
    147a:	7c a1       	ldd	r23, Y+36	; 0x24
    147c:	8d a1       	ldd	r24, Y+37	; 0x25
		__ticks = 1;
    147e:	9e a1       	ldd	r25, Y+38	; 0x26
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    1488:	6d d9       	rcall	.-3366   	; 0x764 <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <LCD_sendCommand+0x1c2>
    148e:	6f a1       	ldd	r22, Y+39	; 0x27
    1490:	78 a5       	ldd	r23, Y+40	; 0x28
    1492:	89 a5       	ldd	r24, Y+41	; 0x29
    1494:	9a a5       	ldd	r25, Y+42	; 0x2a
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9a a3       	std	Y+34, r25	; 0x22
    14b4:	89 a3       	std	Y+33, r24	; 0x21
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <LCD_sendCommand+0x1b8>
    14b8:	89 e1       	ldi	r24, 0x19	; 25
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	98 a3       	std	Y+32, r25	; 0x20
    14be:	8f 8f       	std	Y+31, r24	; 0x1f
    14c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14c2:	98 a1       	ldd	r25, Y+32	; 0x20
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCD_sendCommand+0x1a6>
    14c8:	98 a3       	std	Y+32, r25	; 0x20
    14ca:	8f 8f       	std	Y+31, r24	; 0x1f
    14cc:	89 a1       	ldd	r24, Y+33	; 0x21
    14ce:	9a a1       	ldd	r25, Y+34	; 0x22
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9a a3       	std	Y+34, r25	; 0x22
    14d4:	89 a3       	std	Y+33, r24	; 0x21
    14d6:	89 a1       	ldd	r24, Y+33	; 0x21
    14d8:	9a a1       	ldd	r25, Y+34	; 0x22
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <LCD_sendCommand+0x19a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <LCD_sendCommand+0x1ea>
    14e0:	6b a1       	ldd	r22, Y+35	; 0x23
    14e2:	7c a1       	ldd	r23, Y+36	; 0x24
    14e4:	8d a1       	ldd	r24, Y+37	; 0x25
    14e6:	9e a1       	ldd	r25, Y+38	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9a a3       	std	Y+34, r25	; 0x22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	89 a3       	std	Y+33, r24	; 0x21
    14f4:	89 a1       	ldd	r24, Y+33	; 0x21
    14f6:	9a a1       	ldd	r25, Y+34	; 0x22
    14f8:	9e 8f       	std	Y+30, r25	; 0x1e
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d
    14fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_sendCommand+0x1e2>
    1504:	9e 8f       	std	Y+30, r25	; 0x1e
    1506:	8d 8f       	std	Y+29, r24	; 0x1d
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	69 ad       	ldd	r22, Y+57	; 0x39
    150c:	c5 dd       	rcall	.-1142   	; 0x1098 <GPIO_writePort>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a0 e8       	ldi	r26, 0x80	; 128
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	89 8f       	std	Y+25, r24	; 0x19
    1518:	9a 8f       	std	Y+26, r25	; 0x1a
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    151a:	ab 8f       	std	Y+27, r26	; 0x1b
    151c:	bc 8f       	std	Y+28, r27	; 0x1c
    151e:	69 8d       	ldd	r22, Y+25	; 0x19
    1520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a e7       	ldi	r20, 0x7A	; 122
    152c:	53 e4       	ldi	r21, 0x43	; 67
    152e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8d 8b       	std	Y+21, r24	; 0x15
    1538:	9e 8b       	std	Y+22, r25	; 0x16
    153a:	af 8b       	std	Y+23, r26	; 0x17
    153c:	b8 8f       	std	Y+24, r27	; 0x18
    153e:	6d 89       	ldd	r22, Y+21	; 0x15
    1540:	7e 89       	ldd	r23, Y+22	; 0x16
    1542:	8f 89       	ldd	r24, Y+23	; 0x17
    1544:	98 8d       	ldd	r25, Y+24	; 0x18
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	64 d9       	rcall	.-3384   	; 0x818 <__ltsf2>
    1550:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    1552:	2c f4       	brge	.+10     	; 0x155e <LCD_sendCommand+0x240>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
    155c:	3e c0       	rjmp	.+124    	; 0x15da <LCD_sendCommand+0x2bc>
    155e:	6d 89       	ldd	r22, Y+21	; 0x15
    1560:	7e 89       	ldd	r23, Y+22	; 0x16
    1562:	8f 89       	ldd	r24, Y+23	; 0x17
    1564:	98 8d       	ldd	r25, Y+24	; 0x18
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
    156a:	4f e7       	ldi	r20, 0x7F	; 127
    156c:	57 e4       	ldi	r21, 0x47	; 71
    156e:	fa d8       	rcall	.-3596   	; 0x764 <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	4c f5       	brge	.+82     	; 0x15c6 <LCD_sendCommand+0x2a8>
	else if (__tmp > 65535)
    1574:	69 8d       	ldd	r22, Y+25	; 0x19
    1576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9c 8b       	std	Y+20, r25	; 0x14
    159a:	8b 8b       	std	Y+19, r24	; 0x13
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <LCD_sendCommand+0x29e>
    159e:	89 e1       	ldi	r24, 0x19	; 25
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9a 8b       	std	Y+18, r25	; 0x12
    15a4:	89 8b       	std	Y+17, r24	; 0x11
    15a6:	89 89       	ldd	r24, Y+17	; 0x11
    15a8:	9a 89       	ldd	r25, Y+18	; 0x12
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <LCD_sendCommand+0x28c>
    15ae:	9a 8b       	std	Y+18, r25	; 0x12
    15b0:	89 8b       	std	Y+17, r24	; 0x11
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	9c 89       	ldd	r25, Y+20	; 0x14
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	9c 8b       	std	Y+20, r25	; 0x14
    15ba:	8b 8b       	std	Y+19, r24	; 0x13
    15bc:	8b 89       	ldd	r24, Y+19	; 0x13
    15be:	9c 89       	ldd	r25, Y+20	; 0x14
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	69 f7       	brne	.-38     	; 0x159e <LCD_sendCommand+0x280>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <LCD_sendCommand+0x2d0>
    15c6:	6d 89       	ldd	r22, Y+21	; 0x15
    15c8:	7e 89       	ldd	r23, Y+22	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ca:	8f 89       	ldd	r24, Y+23	; 0x17
    15cc:	98 8d       	ldd	r25, Y+24	; 0x18
    15ce:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d4:	cb 01       	movw	r24, r22
    15d6:	9c 8b       	std	Y+20, r25	; 0x14
    15d8:	8b 8b       	std	Y+19, r24	; 0x13
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15de:	98 8b       	std	Y+16, r25	; 0x10
    15e0:	8f 87       	std	Y+15, r24	; 0x0f
    15e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e4:	98 89       	ldd	r25, Y+16	; 0x10
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <LCD_sendCommand+0x2c8>
    15ea:	98 8b       	std	Y+16, r25	; 0x10
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	22 dc       	rcall	.-1980   	; 0xe3a <GPIO_writePin>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e8       	ldi	r26, 0x80	; 128
    15fc:	bf e3       	ldi	r27, 0x3F	; 63
    15fe:	8b 87       	std	Y+11, r24	; 0x0b
    1600:	9c 87       	std	Y+12, r25	; 0x0c
    1602:	ad 87       	std	Y+13, r26	; 0x0d
    1604:	be 87       	std	Y+14, r27	; 0x0e
    1606:	6b 85       	ldd	r22, Y+11	; 0x0b
    1608:	7c 85       	ldd	r23, Y+12	; 0x0c
    160a:	8d 85       	ldd	r24, Y+13	; 0x0d
    160c:	9e 85       	ldd	r25, Y+14	; 0x0e
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a e7       	ldi	r20, 0x7A	; 122
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8f 83       	std	Y+7, r24	; 0x07
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	98 87       	std	Y+8, r25	; 0x08
    1622:	a9 87       	std	Y+9, r26	; 0x09
    1624:	ba 87       	std	Y+10, r27	; 0x0a
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	f0 d8       	rcall	.-3616   	; 0x818 <__ltsf2>
    1638:	88 23       	and	r24, r24
    163a:	2c f4       	brge	.+10     	; 0x1646 <LCD_sendCommand+0x328>
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
	if (__tmp < 1.0)
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	3e c0       	rjmp	.+124    	; 0x16c2 <LCD_sendCommand+0x3a4>
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	86 d8       	rcall	.-3828   	; 0x764 <__gtsf2>
		__ticks = 1;
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <LCD_sendCommand+0x390>
    165c:	6b 85       	ldd	r22, Y+11	; 0x0b
    165e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
	else if (__tmp > 65535)
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <LCD_sendCommand+0x386>
    1686:	89 e1       	ldi	r24, 0x19	; 25
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 83       	std	Y+4, r25	; 0x04
    168c:	8b 83       	std	Y+3, r24	; 0x03
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_sendCommand+0x374>
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <LCD_sendCommand+0x368>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <LCD_sendCommand+0x3b8>
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_sendCommand+0x3b0>
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	e9 96       	adiw	r28, 0x39	; 57
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	e9 97       	sbiw	r28, 0x39	; 57
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	9a db       	rcall	.-2252   	; 0xe3a <GPIO_writePin>
    1706:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	96 db       	rcall	.-2260   	; 0xe3a <GPIO_writePin>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e8       	ldi	r26, 0x80	; 128
    1714:	bf e3       	ldi	r27, 0x3F	; 63
    1716:	8d ab       	std	Y+53, r24	; 0x35
    1718:	9e ab       	std	Y+54, r25	; 0x36
    171a:	af ab       	std	Y+55, r26	; 0x37
    171c:	b8 af       	std	Y+56, r27	; 0x38
    171e:	6d a9       	ldd	r22, Y+53	; 0x35
    1720:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	8f a9       	ldd	r24, Y+55	; 0x37
    1724:	98 ad       	ldd	r25, Y+56	; 0x38
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	89 ab       	std	Y+49, r24	; 0x31
    1738:	9a ab       	std	Y+50, r25	; 0x32
    173a:	ab ab       	std	Y+51, r26	; 0x33
    173c:	bc ab       	std	Y+52, r27	; 0x34
    173e:	69 a9       	ldd	r22, Y+49	; 0x31
    1740:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    1742:	8b a9       	ldd	r24, Y+51	; 0x33
    1744:	9c a9       	ldd	r25, Y+52	; 0x34
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	64 d8       	rcall	.-3896   	; 0x818 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <LCD_displayCharacter+0x76>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
    175a:	8f a7       	std	Y+47, r24	; 0x2f
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <LCD_displayCharacter+0xf4>
    175e:	69 a9       	ldd	r22, Y+49	; 0x31
    1760:	7a a9       	ldd	r23, Y+50	; 0x32
    1762:	8b a9       	ldd	r24, Y+51	; 0x33
	else if (__tmp > 65535)
    1764:	9c a9       	ldd	r25, Y+52	; 0x34
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <LCD_displayCharacter+0xe0>
    1776:	6d a9       	ldd	r22, Y+53	; 0x35
    1778:	7e a9       	ldd	r23, Y+54	; 0x36
    177a:	8f a9       	ldd	r24, Y+55	; 0x37
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	98 ad       	ldd	r25, Y+56	; 0x38
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	98 ab       	std	Y+48, r25	; 0x30
    179c:	8f a7       	std	Y+47, r24	; 0x2f
    179e:	0f c0       	rjmp	.+30     	; 0x17be <LCD_displayCharacter+0xd6>
    17a0:	89 e1       	ldi	r24, 0x19	; 25
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e a7       	std	Y+46, r25	; 0x2e
    17a6:	8d a7       	std	Y+45, r24	; 0x2d
    17a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    17aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <LCD_displayCharacter+0xc4>
    17b0:	9e a7       	std	Y+46, r25	; 0x2e
    17b2:	8d a7       	std	Y+45, r24	; 0x2d
    17b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b6:	98 a9       	ldd	r25, Y+48	; 0x30
    17b8:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	98 ab       	std	Y+48, r25	; 0x30
    17bc:	8f a7       	std	Y+47, r24	; 0x2f
    17be:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c0:	98 a9       	ldd	r25, Y+48	; 0x30
    17c2:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <LCD_displayCharacter+0xb8>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <LCD_displayCharacter+0x108>
    17c8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ca:	7a a9       	ldd	r23, Y+50	; 0x32
    17cc:	8b a9       	ldd	r24, Y+51	; 0x33
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ce:	9c a9       	ldd	r25, Y+52	; 0x34
    17d0:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	98 ab       	std	Y+48, r25	; 0x30
    17da:	8f a7       	std	Y+47, r24	; 0x2f
    17dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17de:	98 a9       	ldd	r25, Y+48	; 0x30
    17e0:	9c a7       	std	Y+44, r25	; 0x2c
    17e2:	8b a7       	std	Y+43, r24	; 0x2b
    17e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_displayCharacter+0x100>
    17ec:	9c a7       	std	Y+44, r25	; 0x2c
    17ee:	8b a7       	std	Y+43, r24	; 0x2b
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	62 e0       	ldi	r22, 0x02	; 2
    17f4:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17f6:	21 db       	rcall	.-2494   	; 0xe3a <GPIO_writePin>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e8       	ldi	r26, 0x80	; 128
    17fe:	bf e3       	ldi	r27, 0x3F	; 63
    1800:	8f a3       	std	Y+39, r24	; 0x27
    1802:	98 a7       	std	Y+40, r25	; 0x28
    1804:	a9 a7       	std	Y+41, r26	; 0x29
    1806:	ba a7       	std	Y+42, r27	; 0x2a
    1808:	6f a1       	ldd	r22, Y+39	; 0x27
    180a:	78 a5       	ldd	r23, Y+40	; 0x28
    180c:	89 a5       	ldd	r24, Y+41	; 0x29
    180e:	9a a5       	ldd	r25, Y+42	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8b a3       	std	Y+35, r24	; 0x23
    1822:	9c a3       	std	Y+36, r25	; 0x24
    1824:	ad a3       	std	Y+37, r26	; 0x25
    1826:	be a3       	std	Y+38, r27	; 0x26
    1828:	6b a1       	ldd	r22, Y+35	; 0x23
    182a:	7c a1       	ldd	r23, Y+36	; 0x24
    182c:	8d a1       	ldd	r24, Y+37	; 0x25
    182e:	9e a1       	ldd	r25, Y+38	; 0x26
	if (__tmp < 1.0)
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <LCD_displayCharacter+0x162>
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LCD_displayCharacter+0x1e0>
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
	else if (__tmp > 65535)
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <LCD_displayCharacter+0x1cc>
    1862:	6f a1       	ldd	r22, Y+39	; 0x27
    1864:	78 a5       	ldd	r23, Y+40	; 0x28
    1866:	89 a5       	ldd	r24, Y+41	; 0x29
    1868:	9a a5       	ldd	r25, Y+42	; 0x2a
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9a a3       	std	Y+34, r25	; 0x22
    1888:	89 a3       	std	Y+33, r24	; 0x21
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LCD_displayCharacter+0x1c2>
    188c:	89 e1       	ldi	r24, 0x19	; 25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	98 a3       	std	Y+32, r25	; 0x20
    1892:	8f 8f       	std	Y+31, r24	; 0x1f
    1894:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1896:	98 a1       	ldd	r25, Y+32	; 0x20
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_displayCharacter+0x1b0>
    189c:	98 a3       	std	Y+32, r25	; 0x20
    189e:	8f 8f       	std	Y+31, r24	; 0x1f
    18a0:	89 a1       	ldd	r24, Y+33	; 0x21
    18a2:	9a a1       	ldd	r25, Y+34	; 0x22
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9a a3       	std	Y+34, r25	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a8:	89 a3       	std	Y+33, r24	; 0x21
    18aa:	89 a1       	ldd	r24, Y+33	; 0x21
    18ac:	9a a1       	ldd	r25, Y+34	; 0x22
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LCD_displayCharacter+0x1a4>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <LCD_displayCharacter+0x1f4>
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18bc:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9a a3       	std	Y+34, r25	; 0x22
    18c6:	89 a3       	std	Y+33, r24	; 0x21
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	9e 8f       	std	Y+30, r25	; 0x1e
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d
    18d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_displayCharacter+0x1ec>
    18d8:	9e 8f       	std	Y+30, r25	; 0x1e
    18da:	8d 8f       	std	Y+29, r24	; 0x1d
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	69 ad       	ldd	r22, Y+57	; 0x39
    18e0:	db db       	rcall	.-2122   	; 0x1098 <GPIO_writePort>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a0 e8       	ldi	r26, 0x80	; 128
    18e8:	bf e3       	ldi	r27, 0x3F	; 63
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
    18f2:	69 8d       	ldd	r22, Y+25	; 0x19
    18f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fa:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4a e7       	ldi	r20, 0x7A	; 122
    1900:	53 e4       	ldi	r21, 0x43	; 67
    1902:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	8d 8b       	std	Y+21, r24	; 0x15
    190c:	9e 8b       	std	Y+22, r25	; 0x16
    190e:	af 8b       	std	Y+23, r26	; 0x17
    1910:	b8 8f       	std	Y+24, r27	; 0x18
    1912:	6d 89       	ldd	r22, Y+21	; 0x15
    1914:	7e 89       	ldd	r23, Y+22	; 0x16
    1916:	8f 89       	ldd	r24, Y+23	; 0x17
    1918:	98 8d       	ldd	r25, Y+24	; 0x18
    191a:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e8       	ldi	r20, 0x80	; 128
    1920:	5f e3       	ldi	r21, 0x3F	; 63
    1922:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1926:	88 23       	and	r24, r24
    1928:	2c f4       	brge	.+10     	; 0x1934 <LCD_displayCharacter+0x24c>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	9c 8b       	std	Y+20, r25	; 0x14
    1930:	8b 8b       	std	Y+19, r24	; 0x13
    1932:	3f c0       	rjmp	.+126    	; 0x19b2 <LCD_displayCharacter+0x2ca>
		__ticks = 1;
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    193e:	3f ef       	ldi	r19, 0xFF	; 255
    1940:	4f e7       	ldi	r20, 0x7F	; 127
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1948:	18 16       	cp	r1, r24
    194a:	4c f5       	brge	.+82     	; 0x199e <LCD_displayCharacter+0x2b6>
    194c:	69 8d       	ldd	r22, Y+25	; 0x19
    194e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1954:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	51 e4       	ldi	r21, 0x41	; 65
    195c:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	0f c0       	rjmp	.+30     	; 0x1994 <LCD_displayCharacter+0x2ac>
    1976:	89 e1       	ldi	r24, 0x19	; 25
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9a 8b       	std	Y+18, r25	; 0x12
    197c:	89 8b       	std	Y+17, r24	; 0x11
    197e:	89 89       	ldd	r24, Y+17	; 0x11
    1980:	9a 89       	ldd	r25, Y+18	; 0x12
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_displayCharacter+0x29a>
    1986:	9a 8b       	std	Y+18, r25	; 0x12
    1988:	89 8b       	std	Y+17, r24	; 0x11
    198a:	8b 89       	ldd	r24, Y+19	; 0x13
    198c:	9c 89       	ldd	r25, Y+20	; 0x14
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9c 8b       	std	Y+20, r25	; 0x14
    1992:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8b 89       	ldd	r24, Y+19	; 0x13
    1996:	9c 89       	ldd	r25, Y+20	; 0x14
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	69 f7       	brne	.-38     	; 0x1976 <LCD_displayCharacter+0x28e>
    199c:	14 c0       	rjmp	.+40     	; 0x19c6 <LCD_displayCharacter+0x2de>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9c 8b       	std	Y+20, r25	; 0x14
    19b0:	8b 8b       	std	Y+19, r24	; 0x13
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	98 8b       	std	Y+16, r25	; 0x10
    19b8:	8f 87       	std	Y+15, r24	; 0x0f
    19ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    19bc:	98 89       	ldd	r25, Y+16	; 0x10
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <LCD_displayCharacter+0x2d6>
    19c2:	98 8b       	std	Y+16, r25	; 0x10
    19c4:	8f 87       	std	Y+15, r24	; 0x0f
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	36 da       	rcall	.-2964   	; 0xe3a <GPIO_writePin>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	4a e7       	ldi	r20, 0x7A	; 122
    19ec:	53 e4       	ldi	r21, 0x43	; 67
    19ee:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_displayCharacter+0x338>
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_displayCharacter+0x3b6>
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
		__ticks = 1;
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_displayCharacter+0x3a2>
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_displayCharacter+0x398>
    1a62:	89 e1       	ldi	r24, 0x19	; 25
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_displayCharacter+0x386>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_displayCharacter+0x37a>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_displayCharacter+0x3ca>
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_displayCharacter+0x3c2>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	e9 96       	adiw	r28, 0x39	; 57
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <LCD_displayString+0x6>
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	9b 83       	std	Y+3, r25	; 0x03
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ad4:	19 82       	std	Y+1, r1	; 0x01
    1ad6:	0d c0       	rjmp	.+26     	; 0x1af2 <LCD_displayString+0x2e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	e2 0f       	add	r30, r18
    1ae6:	f3 1f       	adc	r31, r19
    1ae8:	80 81       	ld	r24, Z
    1aea:	fe dd       	rcall	.-1028   	; 0x16e8 <LCD_displayCharacter>
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    1aee:	8f 5f       	subi	r24, 0xFF	; 255
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	41 f7       	brne	.-48     	; 0x1ad8 <LCD_displayString+0x14>
    1b08:	0f 90       	pop	r0
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <LCD_moveCursor+0x6>
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <LCD_moveCursor+0x8>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8a 83       	std	Y+2, r24	; 0x02
    1b24:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3d 83       	std	Y+5, r19	; 0x05
    1b2e:	2c 83       	std	Y+4, r18	; 0x04
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	9d 81       	ldd	r25, Y+5	; 0x05
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	c1 f0       	breq	.+48     	; 0x1b6a <LCD_moveCursor+0x56>
    1b3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <LCD_moveCursor+0x3a>
    1b44:	8c 81       	ldd	r24, Y+4	; 0x04
    1b46:	9d 81       	ldd	r25, Y+5	; 0x05
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	61 f0       	breq	.+24     	; 0x1b64 <LCD_moveCursor+0x50>
    1b4c:	19 c0       	rjmp	.+50     	; 0x1b80 <LCD_moveCursor+0x6c>
    1b4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b50:	3d 81       	ldd	r19, Y+5	; 0x05
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	69 f0       	breq	.+26     	; 0x1b72 <LCD_moveCursor+0x5e>
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	91 05       	cpc	r25, r1
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <LCD_moveCursor+0x66>
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	0b c0       	rjmp	.+22     	; 0x1b80 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	80 5c       	subi	r24, 0xC0	; 192
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	07 c0       	rjmp	.+14     	; 0x1b80 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	80 5f       	subi	r24, 0xF0	; 240
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	80 5b       	subi	r24, 0xB0	; 176
    1b7e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	80 68       	ori	r24, 0x80	; 128
    1b84:	cc db       	rcall	.-2152   	; 0x131e <LCD_sendCommand>
    1b86:	0f 90       	pop	r0
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <LCD_displayStringRowColumn+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <LCD_displayStringRowColumn+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
    1ba6:	5c 83       	std	Y+4, r21	; 0x04
    1ba8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	6a 81       	ldd	r22, Y+2	; 0x02
    1bae:	b2 df       	rcall	.-156    	; 0x1b14 <LCD_moveCursor>
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
	LCD_displayString(Str); /* display the string */
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	87 df       	rcall	.-242    	; 0x1ac4 <LCD_displayString>
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	62 97       	sbiw	r28, 0x12	; 18
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	9a 8b       	std	Y+18, r25	; 0x12
    1bda:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	9a 89       	ldd	r25, Y+18	; 0x12
    1be0:	9e 01       	movw	r18, r28
    1be2:	2f 5f       	subi	r18, 0xFF	; 255
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	b9 01       	movw	r22, r18
    1be8:	4a e0       	ldi	r20, 0x0A	; 10
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	d0 d1       	rcall	.+928    	; 0x1f8e <itoa>
    1bee:	ce 01       	movw	r24, r28
   LCD_displayString(buff); /* Display the string */
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	68 df       	rcall	.-304    	; 0x1ac4 <LCD_displayString>
    1bf4:	62 96       	adiw	r28, 0x12	; 18
    1bf6:	0f b6       	in	r0, 0x3f	; 63
}
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <main>:
#include "lcd.h"
#include "ultrasonic.h"


void main(void)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <main+0x6>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62


	/*Initializing the LCD*/
	LCD_init();
    1c10:	6a db       	rcall	.-2348   	; 0x12e6 <LCD_init>
    1c12:	20 e6       	ldi	r18, 0x60	; 96

	/*Writing it on LCD for one time in the program only*/
	LCD_displayStringRowColumn(0, 0, "Distance=     CM");
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	bc df       	rcall	.-136    	; 0x1b96 <LCD_displayStringRowColumn>
    1c1e:	1a 82       	std	Y+2, r1	; 0x02
    1c20:	19 82       	std	Y+1, r1	; 0x01

	uint16 distance_value = 0;
    1c22:	21 d0       	rcall	.+66     	; 0x1c66 <Ultrasonic_init>
    1c24:	12 d1       	rcall	.+548    	; 0x1e4a <Ultrasonic_readDistance>
	while(1)
	{
		/*Iinitializing Ultrasonic that initializes ICU to detect rising edge*/
		Ultrasonic_init();
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01

		/*Reading distance to display it*/
		distance_value = Ultrasonic_readDistance();
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	6a e0       	ldi	r22, 0x0A	; 10
    1c2e:	72 df       	rcall	.-284    	; 0x1b14 <LCD_moveCursor>
    1c30:	89 81       	ldd	r24, Y+1	; 0x01

		/*Displaying value on LCD after converting it into string*/
		LCD_moveCursor(0, 10);
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	c7 df       	rcall	.-114    	; 0x1bc4 <LCD_intgerToString>
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
		LCD_intgerToString(distance_value);
    1c3a:	8a 30       	cpi	r24, 0x0A	; 10
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	38 f4       	brcc	.+14     	; 0x1c4e <main+0x48>
    1c40:	21 e7       	ldi	r18, 0x71	; 113
		/*Condition to clear number from lcd when decrementing */
		if(distance_value < 10)
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	6b e0       	ldi	r22, 0x0B	; 11
    1c48:	a9 01       	movw	r20, r18
    1c4a:	a5 df       	rcall	.-182    	; 0x1b96 <LCD_displayStringRowColumn>
		{
			LCD_displayStringRowColumn( 0 , 11 , "  ");/*clearing 2nd & 3rd numbers*/
    1c4c:	ea cf       	rjmp	.-44     	; 0x1c22 <main+0x1c>
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	84 36       	cpi	r24, 0x64	; 100
    1c54:	91 05       	cpc	r25, r1
    1c56:	28 f7       	brcc	.-54     	; 0x1c22 <main+0x1c>
    1c58:	24 e7       	ldi	r18, 0x74	; 116
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
		}
		else if(distance_value < 100)
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	6c e0       	ldi	r22, 0x0C	; 12
    1c60:	a9 01       	movw	r20, r18
    1c62:	99 df       	rcall	.-206    	; 0x1b96 <LCD_displayStringRowColumn>
    1c64:	de cf       	rjmp	.-68     	; 0x1c22 <main+0x1c>

00001c66 <Ultrasonic_init>:
uint8 g_edgeCount = 0;//variable to count number of edges falling or rising
uint32 g_timeHigh = 0;//variable to count the time for which the echo is high


void Ultrasonic_init(void)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <Ultrasonic_init+0x6>
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
	/*Raising edge*/
	/*
	 * Bit 6 - ICES1 in TCCR1B Register should be 1 for Raising edge
	 */
	/*configure ICU to use F/8 and detect rising edge*/
	Icu_ConfigType Config_Icu = {F_CPU_8,RISING};
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	8a 83       	std	Y+2, r24	; 0x02

	/*Calling ICU init with configuration pointer to struct*/
	Icu_init(&Config_Icu);
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	84 da       	rcall	.-2808   	; 0x1186 <Icu_init>
    1c7e:	85 e4       	ldi	r24, 0x45	; 69

	/*Setup the ICU call back function*/
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    1c80:	9f e0       	ldi	r25, 0x0F	; 15
    1c82:	ce da       	rcall	.-2660   	; 0x1220 <Icu_setCallBack>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	65 e0       	ldi	r22, 0x05	; 5

	/* Setup the direction for the trigger pin as output pin */

	GPIO_setupPinDirection(PORTB_ID, PIN5_ID, PIN_OUTPUT);
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 32 06 	call	0xc64	; 0xc64 <GPIO_setupPinDirection>
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	68 97       	sbiw	r28, 0x18	; 24
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
	 */

	/*
	 * Transmit trigger pulse of at least 10 us to the HC-SR04 Trig Pin
	 */
	GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_HIGH);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	65 e0       	ldi	r22, 0x05	; 5
    1cb0:	41 e0       	ldi	r20, 0x01	; 1
    1cb2:	c3 d8       	rcall	.-3706   	; 0xe3a <GPIO_writePin>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e2       	ldi	r26, 0x20	; 32
    1cba:	b1 e4       	ldi	r27, 0x41	; 65
    1cbc:	8d 8b       	std	Y+21, r24	; 0x15
    1cbe:	9e 8b       	std	Y+22, r25	; 0x16
    1cc0:	af 8b       	std	Y+23, r26	; 0x17
    1cc2:	b8 8f       	std	Y+24, r27	; 0x18
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	2b ea       	ldi	r18, 0xAB	; 171
    1cce:	3a ea       	ldi	r19, 0xAA	; 170
    1cd0:	4a ea       	ldi	r20, 0xAA	; 170
    1cd2:	5e e3       	ldi	r21, 0x3E	; 62
    1cd4:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	89 8b       	std	Y+17, r24	; 0x11
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	ab 8b       	std	Y+19, r26	; 0x13
    1ce2:	bc 8b       	std	Y+20, r27	; 0x14
    1ce4:	69 89       	ldd	r22, Y+17	; 0x11
	if (__tmp < 1.0)
    1ce6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cea:	9c 89       	ldd	r25, Y+20	; 0x14
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	1c f4       	brge	.+6      	; 0x1d02 <Ultrasonic_Trigger+0x6a>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1cfe:	88 8b       	std	Y+16, r24	; 0x10
    1d00:	91 c0       	rjmp	.+290    	; 0x1e24 <Ultrasonic_Trigger+0x18c>
    1d02:	69 89       	ldd	r22, Y+17	; 0x11
	else if (__tmp > 255)
    1d04:	7a 89       	ldd	r23, Y+18	; 0x12
    1d06:	8b 89       	ldd	r24, Y+19	; 0x13
    1d08:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	53 e4       	ldi	r21, 0x43	; 67
    1d12:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	0c f0       	brlt	.+2      	; 0x1d1c <Ultrasonic_Trigger+0x84>
    1d1a:	7b c0       	rjmp	.+246    	; 0x1e12 <Ultrasonic_Trigger+0x17a>
    1d1c:	6d 89       	ldd	r22, Y+21	; 0x15
	{
		_delay_ms(__us / 1000.0);
    1d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d20:	8f 89       	ldd	r24, Y+23	; 0x17
    1d22:	98 8d       	ldd	r25, Y+24	; 0x18
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 09 03 	call	0x612	; 0x612 <__divsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8c 87       	std	Y+12, r24	; 0x0c
    1d36:	9d 87       	std	Y+13, r25	; 0x0d
    1d38:	ae 87       	std	Y+14, r26	; 0x0e
    1d3a:	bf 87       	std	Y+15, r27	; 0x0f
    1d3c:	6c 85       	ldd	r22, Y+12	; 0x0c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a e7       	ldi	r20, 0x7A	; 122
    1d4a:	53 e4       	ldi	r21, 0x43	; 67
    1d4c:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	88 87       	std	Y+8, r24	; 0x08
    1d56:	99 87       	std	Y+9, r25	; 0x09
    1d58:	aa 87       	std	Y+10, r26	; 0x0a
    1d5a:	bb 87       	std	Y+11, r27	; 0x0b
    1d5c:	68 85       	ldd	r22, Y+8	; 0x08
	if (__tmp < 1.0)
    1d5e:	79 85       	ldd	r23, Y+9	; 0x09
    1d60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 0c 04 	call	0x818	; 0x818 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <Ultrasonic_Trigger+0xe6>
    1d74:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9f 83       	std	Y+7, r25	; 0x07
    1d7a:	8e 83       	std	Y+6, r24	; 0x06
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <Ultrasonic_Trigger+0x164>
    1d7e:	68 85       	ldd	r22, Y+8	; 0x08
	else if (__tmp > 65535)
    1d80:	79 85       	ldd	r23, Y+9	; 0x09
    1d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 b2 03 	call	0x764	; 0x764 <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <Ultrasonic_Trigger+0x150>
    1d96:	6c 85       	ldd	r22, Y+12	; 0x0c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9f 83       	std	Y+7, r25	; 0x07
    1dbc:	8e 83       	std	Y+6, r24	; 0x06
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <Ultrasonic_Trigger+0x146>
    1dc0:	89 e1       	ldi	r24, 0x19	; 25
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9d 83       	std	Y+5, r25	; 0x05
    1dc6:	8c 83       	std	Y+4, r24	; 0x04
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	9d 81       	ldd	r25, Y+5	; 0x05
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <Ultrasonic_Trigger+0x134>
    1dd0:	9d 83       	std	Y+5, r25	; 0x05
    1dd2:	8c 83       	std	Y+4, r24	; 0x04
    1dd4:	8e 81       	ldd	r24, Y+6	; 0x06
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9f 83       	std	Y+7, r25	; 0x07
    1ddc:	8e 83       	std	Y+6, r24	; 0x06
    1dde:	8e 81       	ldd	r24, Y+6	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	9f 81       	ldd	r25, Y+7	; 0x07
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <Ultrasonic_Trigger+0x128>
    1de6:	24 c0       	rjmp	.+72     	; 0x1e30 <Ultrasonic_Trigger+0x198>
    1de8:	68 85       	ldd	r22, Y+8	; 0x08
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	79 85       	ldd	r23, Y+9	; 0x09
    1dec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df0:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9f 83       	std	Y+7, r25	; 0x07
    1dfa:	8e 83       	std	Y+6, r24	; 0x06
    1dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1e00:	9b 83       	std	Y+3, r25	; 0x03
    1e02:	8a 83       	std	Y+2, r24	; 0x02
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <Ultrasonic_Trigger+0x170>
    1e0c:	9b 83       	std	Y+3, r25	; 0x03
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <Ultrasonic_Trigger+0x198>
    1e12:	69 89       	ldd	r22, Y+17	; 0x11
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e14:	7a 89       	ldd	r23, Y+18	; 0x12
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	0e 94 48 00 	call	0x90	; 0x90 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	88 8b       	std	Y+16, r24	; 0x10
    1e24:	88 89       	ldd	r24, Y+16	; 0x10
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e2a:	8a 95       	dec	r24
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <Ultrasonic_Trigger+0x192>
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	81 e0       	ldi	r24, 0x01	; 1

	_delay_us(10);

	GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_LOW);
    1e32:	65 e0       	ldi	r22, 0x05	; 5
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	01 d8       	rcall	.-4094   	; 0xe3a <GPIO_writePin>
    1e38:	68 96       	adiw	r28, 0x18	; 24
    1e3a:	0f b6       	in	r0, 0x3f	; 63

}
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <Ultrasonic_readDistance>:


uint16 Ultrasonic_readDistance(void)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <Ultrasonic_readDistance+0x6>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62

	/*Sending the trigger pulse*/
	Ultrasonic_Trigger();
    1e54:	21 df       	rcall	.-446    	; 0x1c98 <Ultrasonic_Trigger>
    1e56:	80 91 81 00 	lds	r24, 0x0081

	/*Waiting for edge processing*/
	/*Then calculating and returning the distance using timer value*/
	/*Ultrasonic sensor  Formula: uS / 58 = centimeters or uS / 148 =inch; or: the
	 * range = high level time * velocity (340M/S) / 2*/
	uint16 distance = (g_timeHigh / 58) ;
    1e5a:	90 91 82 00 	lds	r25, 0x0082
    1e5e:	a0 91 83 00 	lds	r26, 0x0083
    1e62:	b0 91 84 00 	lds	r27, 0x0084
    1e66:	2a e3       	ldi	r18, 0x3A	; 58
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	34 d0       	rcall	.+104    	; 0x1edc <__udivmodsi4>
    1e74:	da 01       	movw	r26, r20
    1e76:	c9 01       	movw	r24, r18
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
	return distance;
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <Ultrasonic_edgeProcessing>:



void Ultrasonic_edgeProcessing(void)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62


	/*Detecting falling edge for the end of the pulse width */

	g_edgeCount++;
    1e92:	80 91 80 00 	lds	r24, 0x0080
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 80 00 	sts	0x0080, r24
	if(g_edgeCount == 1)
    1e9c:	80 91 80 00 	lds	r24, 0x0080
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <Ultrasonic_edgeProcessing+0x22>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
    1ea4:	f9 d9       	rcall	.-3086   	; 0x1298 <Icu_clearTimerValue>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    1ea8:	cd d9       	rcall	.-3174   	; 0x1244 <Icu_setEdgeDetectionType>
    1eaa:	15 c0       	rjmp	.+42     	; 0x1ed6 <Ultrasonic_edgeProcessing+0x4c>
    1eac:	80 91 80 00 	lds	r24, 0x0080
	}
	else if(g_edgeCount == 2)
    1eb0:	82 30       	cpi	r24, 0x02	; 2
    1eb2:	89 f4       	brne	.+34     	; 0x1ed6 <Ultrasonic_edgeProcessing+0x4c>
    1eb4:	e6 d9       	rcall	.-3124   	; 0x1282 <Icu_getInputCaptureValue>
    1eb6:	cc 01       	movw	r24, r24
	{
		/*Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
    1eb8:	a0 e0       	ldi	r26, 0x00	; 0
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	80 93 81 00 	sts	0x0081, r24
    1ec0:	90 93 82 00 	sts	0x0082, r25
    1ec4:	a0 93 83 00 	sts	0x0083, r26
    1ec8:	b0 93 84 00 	sts	0x0084, r27
    1ecc:	f0 d9       	rcall	.-3104   	; 0x12ae <Icu_DeInit>
    1ece:	10 92 80 00 	sts	0x0080, r1
		Icu_DeInit(); /* Disable ICU Driver */
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	b7 d9       	rcall	.-3218   	; 0x1244 <Icu_setEdgeDetectionType>
		g_edgeCount = 0; /*Restart edge count*/
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
		Icu_setEdgeDetectionType(RISING);
    1eda:	08 95       	ret

00001edc <__udivmodsi4>:
    1edc:	a1 e2       	ldi	r26, 0x21	; 33
    1ede:	1a 2e       	mov	r1, r26
	}

}
    1ee0:	aa 1b       	sub	r26, r26
    1ee2:	bb 1b       	sub	r27, r27
    1ee4:	fd 01       	movw	r30, r26
    1ee6:	0d c0       	rjmp	.+26     	; 0x1f02 <__udivmodsi4_ep>

00001ee8 <__udivmodsi4_loop>:
    1ee8:	aa 1f       	adc	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	ee 1f       	adc	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	a2 17       	cp	r26, r18
    1ef2:	b3 07       	cpc	r27, r19
    1ef4:	e4 07       	cpc	r30, r20
    1ef6:	f5 07       	cpc	r31, r21
    1ef8:	20 f0       	brcs	.+8      	; 0x1f02 <__udivmodsi4_ep>
    1efa:	a2 1b       	sub	r26, r18
    1efc:	b3 0b       	sbc	r27, r19
    1efe:	e4 0b       	sbc	r30, r20
    1f00:	f5 0b       	sbc	r31, r21

00001f02 <__udivmodsi4_ep>:
    1f02:	66 1f       	adc	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	1a 94       	dec	r1
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <__udivmodsi4_loop>
    1f0e:	60 95       	com	r22
    1f10:	70 95       	com	r23
    1f12:	80 95       	com	r24
    1f14:	90 95       	com	r25
    1f16:	9b 01       	movw	r18, r22
    1f18:	ac 01       	movw	r20, r24
    1f1a:	bd 01       	movw	r22, r26
    1f1c:	cf 01       	movw	r24, r30
    1f1e:	08 95       	ret

00001f20 <__prologue_saves__>:
    1f20:	2f 92       	push	r2
    1f22:	3f 92       	push	r3
    1f24:	4f 92       	push	r4
    1f26:	5f 92       	push	r5
    1f28:	6f 92       	push	r6
    1f2a:	7f 92       	push	r7
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	ca 1b       	sub	r28, r26
    1f4a:	db 0b       	sbc	r29, r27
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	09 94       	ijmp

00001f58 <__epilogue_restores__>:
    1f58:	2a 88       	ldd	r2, Y+18	; 0x12
    1f5a:	39 88       	ldd	r3, Y+17	; 0x11
    1f5c:	48 88       	ldd	r4, Y+16	; 0x10
    1f5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f60:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f62:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f64:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f66:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f68:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f6a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f6c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f6e:	df 80       	ldd	r13, Y+7	; 0x07
    1f70:	ee 80       	ldd	r14, Y+6	; 0x06
    1f72:	fd 80       	ldd	r15, Y+5	; 0x05
    1f74:	0c 81       	ldd	r16, Y+4	; 0x04
    1f76:	1b 81       	ldd	r17, Y+3	; 0x03
    1f78:	aa 81       	ldd	r26, Y+2	; 0x02
    1f7a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f7c:	ce 0f       	add	r28, r30
    1f7e:	d1 1d       	adc	r29, r1
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	ed 01       	movw	r28, r26
    1f8c:	08 95       	ret

00001f8e <itoa>:
    1f8e:	fb 01       	movw	r30, r22
    1f90:	9f 01       	movw	r18, r30
    1f92:	e8 94       	clt
    1f94:	42 30       	cpi	r20, 0x02	; 2
    1f96:	bc f0       	brlt	.+46     	; 0x1fc6 <itoa+0x38>
    1f98:	45 32       	cpi	r20, 0x25	; 37
    1f9a:	ac f4       	brge	.+42     	; 0x1fc6 <itoa+0x38>
    1f9c:	4a 30       	cpi	r20, 0x0A	; 10
    1f9e:	29 f4       	brne	.+10     	; 0x1faa <itoa+0x1c>
    1fa0:	97 fb       	bst	r25, 7
    1fa2:	1e f4       	brtc	.+6      	; 0x1faa <itoa+0x1c>
    1fa4:	90 95       	com	r25
    1fa6:	81 95       	neg	r24
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	64 2f       	mov	r22, r20
    1fac:	77 27       	eor	r23, r23
    1fae:	1e d0       	rcall	.+60     	; 0x1fec <__udivmodhi4>
    1fb0:	80 5d       	subi	r24, 0xD0	; 208
    1fb2:	8a 33       	cpi	r24, 0x3A	; 58
    1fb4:	0c f0       	brlt	.+2      	; 0x1fb8 <itoa+0x2a>
    1fb6:	89 5d       	subi	r24, 0xD9	; 217
    1fb8:	81 93       	st	Z+, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	a9 f7       	brne	.-22     	; 0x1faa <itoa+0x1c>
    1fc0:	16 f4       	brtc	.+4      	; 0x1fc6 <itoa+0x38>
    1fc2:	5d e2       	ldi	r21, 0x2D	; 45
    1fc4:	51 93       	st	Z+, r21
    1fc6:	10 82       	st	Z, r1
    1fc8:	c9 01       	movw	r24, r18
    1fca:	00 c0       	rjmp	.+0      	; 0x1fcc <strrev>

00001fcc <strrev>:
    1fcc:	dc 01       	movw	r26, r24
    1fce:	fc 01       	movw	r30, r24
    1fd0:	67 2f       	mov	r22, r23
    1fd2:	71 91       	ld	r23, Z+
    1fd4:	77 23       	and	r23, r23
    1fd6:	e1 f7       	brne	.-8      	; 0x1fd0 <strrev+0x4>
    1fd8:	32 97       	sbiw	r30, 0x02	; 2
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <strrev+0x18>
    1fdc:	7c 91       	ld	r23, X
    1fde:	6d 93       	st	X+, r22
    1fe0:	70 83       	st	Z, r23
    1fe2:	62 91       	ld	r22, -Z
    1fe4:	ae 17       	cp	r26, r30
    1fe6:	bf 07       	cpc	r27, r31
    1fe8:	c8 f3       	brcs	.-14     	; 0x1fdc <strrev+0x10>
    1fea:	08 95       	ret

00001fec <__udivmodhi4>:
    1fec:	aa 1b       	sub	r26, r26
    1fee:	bb 1b       	sub	r27, r27
    1ff0:	51 e1       	ldi	r21, 0x11	; 17
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <__udivmodhi4_ep>

00001ff4 <__udivmodhi4_loop>:
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	a6 17       	cp	r26, r22
    1ffa:	b7 07       	cpc	r27, r23
    1ffc:	10 f0       	brcs	.+4      	; 0x2002 <__udivmodhi4_ep>
    1ffe:	a6 1b       	sub	r26, r22
    2000:	b7 0b       	sbc	r27, r23

00002002 <__udivmodhi4_ep>:
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	5a 95       	dec	r21
    2008:	a9 f7       	brne	.-22     	; 0x1ff4 <__udivmodhi4_loop>
    200a:	80 95       	com	r24
    200c:	90 95       	com	r25
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	08 95       	ret

00002014 <_exit>:
    2014:	f8 94       	cli

00002016 <__stop_program>:
    2016:	ff cf       	rjmp	.-2      	; 0x2016 <__stop_program>
